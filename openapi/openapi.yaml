openapi: 3.1.0
info:
  title: Aperture Finance Uniswap V3 Liquidity Position Automation API
  version: 1.0.0
  contact:
    email: contact@aperture.finance
    url: https://linktr.ee/ApertureFinance
  description: >-
    Aperture's Uniswap V3 liquidity position (LP) management and automation API
    allows LP holders to schedule **'triggers'** which automatically invokes an
    **action** when the specified **condition** is met.

    An **action** could be closing a position, rebalancing a position (closing it and opening a new one with a different price range after performing the necessary swap), or reinvest (claiming accrued fees and add them as liquidity to the position).

    A **condition** could be based on time, price, or a combination. Example of a supported condition: when ETH price remains above 3000 USD for at least 72 hours according to Coingecko price feed.
paths:
  /checkPositionApproval:
    description: Checks whether Aperture has approval to manage the specified position.
    get:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                chainId:
                  type: string
                  enum:
                    - ETHEREUM_MAINNET_CHAIN_ID
                    - GOERLI_TESTNET_CHAIN_ID
                    - ARBITRUM_MAINNET_CHAIN_ID
                    - ARBITRUM_GOERLI_TESTNET_CHAIN_ID
                    - 1
                    - 42161
                    - 5
                    - 421613
                tokenId:
                  type: string
                  minLength: 1
              required:
                - chainId
                - tokenId
      responses:
        '200':
          description: Position approval status check successful.
          content:
            application/json:
              schema:
                type: boolean
                description: Whether Aperture has approval to manage the specified position.
        '400': &a1
          description: Bad Request
          content:
            application/json:
              schema:
                type: string
                description: Message explaining why the request is bad
  /updatePositionPermit:
    description:
      Provides a new signed permit for Aperture to manage the specified
      position. The signed permit will be stored in the database and will be
      used to authorize the position when the action is triggered.
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                chainId:
                  type: string
                  enum:
                    - ETHEREUM_MAINNET_CHAIN_ID
                    - GOERLI_TESTNET_CHAIN_ID
                    - ARBITRUM_MAINNET_CHAIN_ID
                    - ARBITRUM_GOERLI_TESTNET_CHAIN_ID
                    - 1
                    - 42161
                    - 5
                    - 421613
                tokenId:
                  type: string
                  minLength: 1
                permitInfo:
                  type: object
                  properties:
                    signature:
                      type: string
                      minLength: 1
                      description: A raw signature that can be generated by
                        https://docs.ethers.org/v5/api/signer/#Signer-signTypedData.
                    deadline:
                      type: string
                      minLength: 1
                      description: Unix timestamp in seconds.
                  required:
                    - signature
                    - deadline
                  description:
                    See https://eips.ethereum.org/EIPS/eip-4494 for information on the
                    "permit" approval flow.
              required:
                - chainId
                - tokenId
                - permitInfo
      responses:
        '200':
          description: Position permit updated successfully.
        '400': *a1
        '500': &a2
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: string
                description: Message explaining the error encountered
  /createTrigger:
    description: Create a trigger that will invoke the specified action when the
      specified condition is met.
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payloadSignature:
                  type: string
                  minLength: 1
                  description: Signature of the payload.
                payload:
                  type: object
                  properties:
                    ownerAddr:
                      type: string
                      minLength: 1
                    chainId:
                      type: string
                      enum:
                        - ETHEREUM_MAINNET_CHAIN_ID
                        - GOERLI_TESTNET_CHAIN_ID
                        - ARBITRUM_MAINNET_CHAIN_ID
                        - ARBITRUM_GOERLI_TESTNET_CHAIN_ID
                        - 1
                        - 42161
                        - 5
                        - 421613
                    nftId:
                      type: string
                      minLength: 1
                    action:
                      discriminator:
                        propertyName: type
                      oneOf:
                        - type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - Close
                            slippage:
                              type: number
                              minimum: 0
                              maximum: 1
                              description:
                                A number between 0 and 1, inclusive. Digits after the sixth decimal
                                point are ignored, i.e. the precision is
                                0.000001.
                            maxGasProportion:
                              type: number
                              minimum: 0
                              exclusiveMinimum: true
                              maximum: 0.5
                              description:
                                Aperture deducts tokens from the position to cover the cost of
                                performing this action (gas). The
                                `maxGasProportion` value represents the largest
                                allowed proportion of the position value to be
                                deducted. For example, a `maxGasProportion` of
                                0.10 represents 10% of the position, i.e. no
                                more than 10% of the position's tokens
                                (principal and accrued fees) may be deducted. If
                                network gas price is high and the deduction
                                would exceed the specified ceiling, then the
                                action will not be triggered.
                          required:
                            - type
                            - slippage
                            - maxGasProportion
                          description:
                            Close a position, and send both tokens (principal and collected
                            fees) to the position owner.
                        - type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - LimitOrderClose
                            inputTokenAddr:
                              type: string
                              minLength: 1
                            maxGasProportion:
                              type: number
                              minimum: 0
                              exclusiveMinimum: true
                              maximum: 0.5
                          required:
                            - type
                            - inputTokenAddr
                            - maxGasProportion
                          description:
                            Same as 'Close' but the position serves a limit order placed on
                            Aperture. No slippage needs to be specified as limit
                            order positions are always closed with a zero
                            slippage setting.
                        - type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - Reinvest
                            slippage:
                              type: number
                              minimum: 0
                              maximum: 1
                            maxGasProportion:
                              type: number
                              minimum: 0
                              exclusiveMinimum: true
                              maximum: 0.5
                          required:
                            - type
                            - slippage
                            - maxGasProportion
                          description:
                            Claims accrued fees, swap them to the same ratio as the principal
                            amounts, and add liquidity.
                        - type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - Rebalance
                            tickLower:
                              type: integer
                            tickUpper:
                              type: integer
                            slippage:
                              type: number
                              minimum: 0
                              maximum: 1
                            maxGasProportion:
                              type: number
                              minimum: 0
                              exclusiveMinimum: true
                              maximum: 0.5
                          required:
                            - type
                            - tickLower
                            - tickUpper
                            - slippage
                            - maxGasProportion
                          description:
                            Close a position, and swap tokens (principal and collected fees) to
                            the ratio required by the specified new price range,
                            and open a position with that price range.
                    condition:
                      discriminator:
                        propertyName: type
                      oneOf:
                        - type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - Time
                            timeAfterEpochSec:
                              type: integer
                              minimum: 0
                              exclusiveMinimum: true
                              description:
                                This timestamp threshold is specified as the number of seconds
                                since UNIX epoch. The condition is considered
                                met if the current time meets or exceeds
                                `timeAfterEpochSec`.
                          required:
                            - type
                            - timeAfterEpochSec
                        - type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - TokenAmount
                            zeroAmountToken:
                              oneOf:
                                - type: number
                                  enum:
                                    - 0
                                - type: number
                                  enum:
                                    - 1
                              description:
                                The condition is considered met if the specified token has a zero
                                (principal) amount in the position.
                                `zeroAmountToken` can only be either 0 or 1,
                                representing token0 or token1 in the position,
                                respectively. For example, if `zeroAmountToken`
                                is 1, then the condition is considered met if
                                token1 in the position is exactly zero. Note
                                that only the principal amount is considered;
                                accrued fees are not.
                          required:
                            - type
                            - zeroAmountToken
                        - type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - Price
                              description:
                                Exactly one of `gte` and `lte` should be defined; the other must be
                                `undefined`. The defined float value represents
                                the price threshold to compare against.
                            singleToken:
                              oneOf:
                                - type: number
                                  enum:
                                    - 0
                                - type: number
                                  enum:
                                    - 1
                              description:
                                If `singleToken` is set, the condition is considered met if the
                                current USD price of the specified token (either
                                token0 or token1) meets the specified threshold.
                            gte:
                              type: string
                              description:
                                If `gte` is set, the condition is considered met if the current
                                price >= `gte`.
                            lte:
                              type: string
                              description:
                                If `lte` is set, the condition is considered met if the current
                                price <= `lte`.
                            durationSec:
                              type: integer
                              minimum: 0
                              exclusiveMinimum: true
                              description:
                                If set, the condition is only considered met if the price remains
                                satisfaction the threshold requirement for at
                                least the past `durationSec` seconds. For
                                example, if `gte` is 10 and `durationSec` is set
                                to 3600, then the condition is only considered
                                met if the price remains >= 10 for the entire
                                past hour. The historical price feed used is
                                Coingecko.
                          required:
                            - type
                          description:
                            If `singleToken` is set, the price condition compares the specified
                            token's USD price against the specified
                            threshold.Otherwise, token0's price denominated in
                            token1 is compared against the specified threshold,
                            and we follow how a Uniswap V3 liquidity pool
                            defines price, i.e. how much raw token1 equals 1 raw
                            token0 in value. "Raw" means the raw uint256 integer
                            amount used in the token contract. For example, if
                            token A uses 8 decimals, then 1 raw token A
                            represents 10^(-8) tokens in human-readable form.
                        - type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - AccruedFees
                            feeToPrincipalRatioThreshold:
                              type: number
                              minimum: 0
                              exclusiveMinimum: true
                          required:
                            - type
                            - feeToPrincipalRatioThreshold
                          description:
                            The accrued-fees condition specifies a threshold in the form of the
                            ratio between the value of accrued fees and that of
                            principal tokens in a specific liquidity position.
                            This condition serves "auto-compound" which triggers
                            a "reinvest" action whenever the accrued fees meet
                            the threshold specified in this condition.
                    expiration:
                      type: integer
                      minimum: 0
                      exclusiveMinimum: true
                  required:
                    - ownerAddr
                    - chainId
                    - nftId
                    - action
                    - condition
                    - expiration
                permitInfo:
                  type: object
                  properties:
                    signature:
                      type: string
                      minLength: 1
                      description: A raw signature that can be generated by
                        https://docs.ethers.org/v5/api/signer/#Signer-signTypedData.
                    deadline:
                      type: string
                      minLength: 1
                      description: Unix timestamp in seconds.
                  required:
                    - signature
                    - deadline
                  description:
                    If Aperture doesn't already have authority over the position, then
                    `permitInfo` should be obtained from the user and populated
                    here.
              required:
                - payloadSignature
                - payload
      responses:
        '200':
          description: Trigger created successfully.
        '400': *a1
        '500': *a2
  /listTrigger:
    description: Lists triggers that meet the specified criteria.
    get:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ownerAddr:
                  type: string
                  minLength: 1
                chainId:
                  type: string
                  enum:
                    - ETHEREUM_MAINNET_CHAIN_ID
                    - GOERLI_TESTNET_CHAIN_ID
                    - ARBITRUM_MAINNET_CHAIN_ID
                    - ARBITRUM_GOERLI_TESTNET_CHAIN_ID
                    - 1
                    - 42161
                    - 5
                    - 421613
                isLimitOrder:
                  type: boolean
              required:
                - ownerAddr
                - chainId
                - isLimitOrder
      responses:
        '200':
          description: Triggers listed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  triggers:
                    type: array
                    items:
                      type: object
                      properties:
                        taskId:
                          type: number
                          minimum: 0
                        nftId:
                          type: string
                          minLength: 1
                        status:
                          type: string
                          enum:
                            - CREATED
                            - STARTED
                            - COMPLETED
                            - INVALID
                            - DELETED
                        lastFailedMessage:
                          type: string
                        limitOrderInfo:
                          type: object
                          properties:
                            inputTokenAmountAtCreation:
                              type: object
                              properties:
                                address:
                                  type: string
                                  minLength: 1
                                  description: The ERC-20 token contract address.
                                rawAmount:
                                  type: string
                                  minLength: 1
                                  description:
                                    The raw amount, which is the human-readable format multiplied by
                                    the token decimal.
                              required:
                                - address
                                - rawAmount
                              description: The amount of input token at limit order creation.
                            outputTokenAmountAtClosure:
                              type: object
                              properties:
                                address:
                                  type: string
                                  minLength: 1
                                  description: The ERC-20 token contract address.
                                rawAmount:
                                  type: string
                                  minLength: 1
                                  description:
                                    The raw amount, which is the human-readable format multiplied by
                                    the token decimal.
                              required:
                                - address
                                - rawAmount
                              description:
                                The calculated amount of output token at limit order closure. Note
                                that the limit order may still be pending
                                fulfillment.
                            earnedFeeInputToken:
                              type: string
                              description:
                                The amount of fees earned in input token. Only populated after the
                                limit order is fulfilled.
                            earnedFeeOutputToken:
                              type: string
                              description:
                                The amount of fees earned in output token. Only populated after the
                                limit order is fulfilled.
                            feeTier:
                              type: string
                              enum:
                                - LOWEST
                                - LOW
                                - MEDIUM
                                - HIGH
                                - 100
                                - 500
                                - 3000
                                - 10000
                            tickLower:
                              type: integer
                            tickUpper:
                              type: integer
                          required:
                            - inputTokenAmountAtCreation
                            - outputTokenAmountAtClosure
                            - feeTier
                            - tickLower
                            - tickUpper
                        condition:
                          discriminator:
                            propertyName: type
                          oneOf:
                            - type: object
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - Time
                                timeAfterEpochSec:
                                  type: integer
                                  minimum: 0
                                  exclusiveMinimum: true
                                  description:
                                    This timestamp threshold is specified as the number of seconds
                                    since UNIX epoch. The condition is
                                    considered met if the current time meets or
                                    exceeds `timeAfterEpochSec`.
                              required:
                                - type
                                - timeAfterEpochSec
                            - type: object
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - TokenAmount
                                zeroAmountToken:
                                  oneOf:
                                    - type: number
                                      enum:
                                        - 0
                                    - type: number
                                      enum:
                                        - 1
                                  description:
                                    The condition is considered met if the specified token has a zero
                                    (principal) amount in the position.
                                    `zeroAmountToken` can only be either 0 or 1,
                                    representing token0 or token1 in the
                                    position, respectively. For example, if
                                    `zeroAmountToken` is 1, then the condition
                                    is considered met if token1 in the position
                                    is exactly zero. Note that only the
                                    principal amount is considered; accrued fees
                                    are not.
                              required:
                                - type
                                - zeroAmountToken
                            - type: object
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - Price
                                  description:
                                    Exactly one of `gte` and `lte` should be defined; the other must be
                                    `undefined`. The defined float value
                                    represents the price threshold to compare
                                    against.
                                singleToken:
                                  oneOf:
                                    - type: number
                                      enum:
                                        - 0
                                    - type: number
                                      enum:
                                        - 1
                                  description:
                                    If `singleToken` is set, the condition is considered met if the
                                    current USD price of the specified token
                                    (either token0 or token1) meets the
                                    specified threshold.
                                gte:
                                  type: string
                                  description:
                                    If `gte` is set, the condition is considered met if the current
                                    price >= `gte`.
                                lte:
                                  type: string
                                  description:
                                    If `lte` is set, the condition is considered met if the current
                                    price <= `lte`.
                                durationSec:
                                  type: integer
                                  minimum: 0
                                  exclusiveMinimum: true
                                  description:
                                    If set, the condition is only considered met if the price remains
                                    satisfaction the threshold requirement for
                                    at least the past `durationSec` seconds. For
                                    example, if `gte` is 10 and `durationSec` is
                                    set to 3600, then the condition is only
                                    considered met if the price remains >= 10
                                    for the entire past hour. The historical
                                    price feed used is Coingecko.
                              required:
                                - type
                              description:
                                If `singleToken` is set, the price condition compares the specified
                                token's USD price against the specified
                                threshold.Otherwise, token0's price denominated
                                in token1 is compared against the specified
                                threshold, and we follow how a Uniswap V3
                                liquidity pool defines price, i.e. how much raw
                                token1 equals 1 raw token0 in value. "Raw" means
                                the raw uint256 integer amount used in the token
                                contract. For example, if token A uses 8
                                decimals, then 1 raw token A represents 10^(-8)
                                tokens in human-readable form.
                            - type: object
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - AccruedFees
                                feeToPrincipalRatioThreshold:
                                  type: number
                                  minimum: 0
                                  exclusiveMinimum: true
                              required:
                                - type
                                - feeToPrincipalRatioThreshold
                              description:
                                The accrued-fees condition specifies a threshold in the form of the
                                ratio between the value of accrued fees and that
                                of principal tokens in a specific liquidity
                                position. This condition serves "auto-compound"
                                which triggers a "reinvest" action whenever the
                                accrued fees meet the threshold specified in
                                this condition.
                        action:
                          discriminator:
                            propertyName: type
                          oneOf:
                            - type: object
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - Close
                                slippage:
                                  type: number
                                  minimum: 0
                                  maximum: 1
                                  description:
                                    A number between 0 and 1, inclusive. Digits after the sixth decimal
                                    point are ignored, i.e. the precision is
                                    0.000001.
                                maxGasProportion:
                                  type: number
                                  minimum: 0
                                  exclusiveMinimum: true
                                  maximum: 0.5
                                  description:
                                    Aperture deducts tokens from the position to cover the cost of
                                    performing this action (gas). The
                                    `maxGasProportion` value represents the
                                    largest allowed proportion of the position
                                    value to be deducted. For example, a
                                    `maxGasProportion` of 0.10 represents 10% of
                                    the position, i.e. no more than 10% of the
                                    position's tokens (principal and accrued
                                    fees) may be deducted. If network gas price
                                    is high and the deduction would exceed the
                                    specified ceiling, then the action will not
                                    be triggered.
                              required:
                                - type
                                - slippage
                                - maxGasProportion
                              description:
                                Close a position, and send both tokens (principal and collected
                                fees) to the position owner.
                            - type: object
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - LimitOrderClose
                                inputTokenAddr:
                                  type: string
                                  minLength: 1
                                maxGasProportion:
                                  type: number
                                  minimum: 0
                                  exclusiveMinimum: true
                                  maximum: 0.5
                              required:
                                - type
                                - inputTokenAddr
                                - maxGasProportion
                              description:
                                Same as 'Close' but the position serves a limit order placed on
                                Aperture. No slippage needs to be specified as
                                limit order positions are always closed with a
                                zero slippage setting.
                            - type: object
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - Reinvest
                                slippage:
                                  type: number
                                  minimum: 0
                                  maximum: 1
                                maxGasProportion:
                                  type: number
                                  minimum: 0
                                  exclusiveMinimum: true
                                  maximum: 0.5
                              required:
                                - type
                                - slippage
                                - maxGasProportion
                              description:
                                Claims accrued fees, swap them to the same ratio as the principal
                                amounts, and add liquidity.
                            - type: object
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - Rebalance
                                tickLower:
                                  type: integer
                                tickUpper:
                                  type: integer
                                slippage:
                                  type: number
                                  minimum: 0
                                  maximum: 1
                                maxGasProportion:
                                  type: number
                                  minimum: 0
                                  exclusiveMinimum: true
                                  maximum: 0.5
                              required:
                                - type
                                - tickLower
                                - tickUpper
                                - slippage
                                - maxGasProportion
                              description:
                                Close a position, and swap tokens (principal and collected fees) to
                                the ratio required by the specified new price
                                range, and open a position with that price
                                range.
                        expiration:
                          type: integer
                          minimum: 0
                          exclusiveMinimum: true
                      required:
                        - taskId
                        - nftId
                        - status
                        - condition
                        - action
                        - expiration
                required:
                  - triggers
        '400': *a1
        '500': *a2
  /updateTrigger:
    description: Updates the specified trigger with a new condition and/or action.
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payloadSignature:
                  type: string
                  minLength: 1
                  description: Signature of the payload.
                payload:
                  type: object
                  properties:
                    ownerAddr:
                      type: string
                      minLength: 1
                    chainId:
                      type: string
                      enum:
                        - ETHEREUM_MAINNET_CHAIN_ID
                        - GOERLI_TESTNET_CHAIN_ID
                        - ARBITRUM_MAINNET_CHAIN_ID
                        - ARBITRUM_GOERLI_TESTNET_CHAIN_ID
                        - 1
                        - 42161
                        - 5
                        - 421613
                    taskId:
                      type: number
                      minimum: 0
                    action:
                      discriminator:
                        propertyName: type
                      oneOf:
                        - type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - Close
                            slippage:
                              type: number
                              minimum: 0
                              maximum: 1
                              description:
                                A number between 0 and 1, inclusive. Digits after the sixth decimal
                                point are ignored, i.e. the precision is
                                0.000001.
                            maxGasProportion:
                              type: number
                              minimum: 0
                              exclusiveMinimum: true
                              maximum: 0.5
                              description:
                                Aperture deducts tokens from the position to cover the cost of
                                performing this action (gas). The
                                `maxGasProportion` value represents the largest
                                allowed proportion of the position value to be
                                deducted. For example, a `maxGasProportion` of
                                0.10 represents 10% of the position, i.e. no
                                more than 10% of the position's tokens
                                (principal and accrued fees) may be deducted. If
                                network gas price is high and the deduction
                                would exceed the specified ceiling, then the
                                action will not be triggered.
                          required:
                            - type
                            - slippage
                            - maxGasProportion
                          description:
                            Close a position, and send both tokens (principal and collected
                            fees) to the position owner.
                        - type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - LimitOrderClose
                            inputTokenAddr:
                              type: string
                              minLength: 1
                            maxGasProportion:
                              type: number
                              minimum: 0
                              exclusiveMinimum: true
                              maximum: 0.5
                          required:
                            - type
                            - inputTokenAddr
                            - maxGasProportion
                          description:
                            Same as 'Close' but the position serves a limit order placed on
                            Aperture. No slippage needs to be specified as limit
                            order positions are always closed with a zero
                            slippage setting.
                        - type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - Reinvest
                            slippage:
                              type: number
                              minimum: 0
                              maximum: 1
                            maxGasProportion:
                              type: number
                              minimum: 0
                              exclusiveMinimum: true
                              maximum: 0.5
                          required:
                            - type
                            - slippage
                            - maxGasProportion
                          description:
                            Claims accrued fees, swap them to the same ratio as the principal
                            amounts, and add liquidity.
                        - type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - Rebalance
                            tickLower:
                              type: integer
                            tickUpper:
                              type: integer
                            slippage:
                              type: number
                              minimum: 0
                              maximum: 1
                            maxGasProportion:
                              type: number
                              minimum: 0
                              exclusiveMinimum: true
                              maximum: 0.5
                          required:
                            - type
                            - tickLower
                            - tickUpper
                            - slippage
                            - maxGasProportion
                          description:
                            Close a position, and swap tokens (principal and collected fees) to
                            the ratio required by the specified new price range,
                            and open a position with that price range.
                    condition:
                      discriminator:
                        propertyName: type
                      oneOf:
                        - type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - Time
                            timeAfterEpochSec:
                              type: integer
                              minimum: 0
                              exclusiveMinimum: true
                              description:
                                This timestamp threshold is specified as the number of seconds
                                since UNIX epoch. The condition is considered
                                met if the current time meets or exceeds
                                `timeAfterEpochSec`.
                          required:
                            - type
                            - timeAfterEpochSec
                        - type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - TokenAmount
                            zeroAmountToken:
                              oneOf:
                                - type: number
                                  enum:
                                    - 0
                                - type: number
                                  enum:
                                    - 1
                              description:
                                The condition is considered met if the specified token has a zero
                                (principal) amount in the position.
                                `zeroAmountToken` can only be either 0 or 1,
                                representing token0 or token1 in the position,
                                respectively. For example, if `zeroAmountToken`
                                is 1, then the condition is considered met if
                                token1 in the position is exactly zero. Note
                                that only the principal amount is considered;
                                accrued fees are not.
                          required:
                            - type
                            - zeroAmountToken
                        - type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - Price
                              description:
                                Exactly one of `gte` and `lte` should be defined; the other must be
                                `undefined`. The defined float value represents
                                the price threshold to compare against.
                            singleToken:
                              oneOf:
                                - type: number
                                  enum:
                                    - 0
                                - type: number
                                  enum:
                                    - 1
                              description:
                                If `singleToken` is set, the condition is considered met if the
                                current USD price of the specified token (either
                                token0 or token1) meets the specified threshold.
                            gte:
                              type: string
                              description:
                                If `gte` is set, the condition is considered met if the current
                                price >= `gte`.
                            lte:
                              type: string
                              description:
                                If `lte` is set, the condition is considered met if the current
                                price <= `lte`.
                            durationSec:
                              type: integer
                              minimum: 0
                              exclusiveMinimum: true
                              description:
                                If set, the condition is only considered met if the price remains
                                satisfaction the threshold requirement for at
                                least the past `durationSec` seconds. For
                                example, if `gte` is 10 and `durationSec` is set
                                to 3600, then the condition is only considered
                                met if the price remains >= 10 for the entire
                                past hour. The historical price feed used is
                                Coingecko.
                          required:
                            - type
                          description:
                            If `singleToken` is set, the price condition compares the specified
                            token's USD price against the specified
                            threshold.Otherwise, token0's price denominated in
                            token1 is compared against the specified threshold,
                            and we follow how a Uniswap V3 liquidity pool
                            defines price, i.e. how much raw token1 equals 1 raw
                            token0 in value. "Raw" means the raw uint256 integer
                            amount used in the token contract. For example, if
                            token A uses 8 decimals, then 1 raw token A
                            represents 10^(-8) tokens in human-readable form.
                        - type: object
                          properties:
                            type:
                              type: string
                              enum:
                                - AccruedFees
                            feeToPrincipalRatioThreshold:
                              type: number
                              minimum: 0
                              exclusiveMinimum: true
                          required:
                            - type
                            - feeToPrincipalRatioThreshold
                          description:
                            The accrued-fees condition specifies a threshold in the form of the
                            ratio between the value of accrued fees and that of
                            principal tokens in a specific liquidity position.
                            This condition serves "auto-compound" which triggers
                            a "reinvest" action whenever the accrued fees meet
                            the threshold specified in this condition.
                    expiration:
                      type: integer
                      minimum: 0
                      exclusiveMinimum: true
                  required:
                    - ownerAddr
                    - chainId
                    - taskId
                    - expiration
              required:
                - payloadSignature
                - payload
      responses:
        '200':
          description: The trigger has been successfully updated.
        '400': *a1
        '500': *a2
  /deleteTrigger:
    description: Deletes the specified trigger.
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payloadSignature:
                  type: string
                  minLength: 1
                  description: Signature of the payload.
                payload:
                  type: object
                  properties:
                    ownerAddr:
                      type: string
                      minLength: 1
                    chainId:
                      type: string
                      enum:
                        - ETHEREUM_MAINNET_CHAIN_ID
                        - GOERLI_TESTNET_CHAIN_ID
                        - ARBITRUM_MAINNET_CHAIN_ID
                        - ARBITRUM_GOERLI_TESTNET_CHAIN_ID
                        - 1
                        - 42161
                        - 5
                        - 421613
                    taskId:
                      type: number
                      minimum: 0
                  required:
                    - ownerAddr
                    - chainId
                    - taskId
              required:
                - payloadSignature
                - payload
      responses:
        '200':
          description: The trigger has been successfully deleted.
        '400': *a1
        '500': *a2
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers: []
