/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  EphemeralAllPositions,
  EphemeralAllPositionsInterface,
} from "../../../../src/lens/EphemeralPositionLens.sol/EphemeralAllPositions";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract INonfungiblePositionManager",
        name: "npm",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "contract INonfungiblePositionManager",
        name: "npm",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "allPositions",
    outputs: [
      {
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "uint96",
                name: "nonce",
                type: "uint96",
              },
              {
                internalType: "address",
                name: "operator",
                type: "address",
              },
              {
                internalType: "address",
                name: "token0",
                type: "address",
              },
              {
                internalType: "address",
                name: "token1",
                type: "address",
              },
              {
                internalType: "uint24",
                name: "fee",
                type: "uint24",
              },
              {
                internalType: "int24",
                name: "tickLower",
                type: "int24",
              },
              {
                internalType: "int24",
                name: "tickUpper",
                type: "int24",
              },
              {
                internalType: "uint128",
                name: "liquidity",
                type: "uint128",
              },
              {
                internalType: "uint256",
                name: "feeGrowthInside0LastX128",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "feeGrowthInside1LastX128",
                type: "uint256",
              },
              {
                internalType: "uint128",
                name: "tokensOwed0",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "tokensOwed1",
                type: "uint128",
              },
            ],
            internalType: "struct PositionFull",
            name: "position",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint160",
                name: "sqrtPriceX96",
                type: "uint160",
              },
              {
                internalType: "int24",
                name: "tick",
                type: "int24",
              },
              {
                internalType: "uint16",
                name: "observationIndex",
                type: "uint16",
              },
              {
                internalType: "uint16",
                name: "observationCardinality",
                type: "uint16",
              },
              {
                internalType: "uint16",
                name: "observationCardinalityNext",
                type: "uint16",
              },
              {
                internalType: "uint8",
                name: "feeProtocol",
                type: "uint8",
              },
              {
                internalType: "bool",
                name: "unlocked",
                type: "bool",
              },
            ],
            internalType: "struct Slot0",
            name: "slot0",
            type: "tuple",
          },
          {
            internalType: "uint128",
            name: "activeLiquidity",
            type: "uint128",
          },
        ],
        internalType: "struct PositionState[]",
        name: "positions",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346200059d576040816200080b8038038091620000238285620005ca565b8339810103126200059d5780516001600160a01b039182821682036200059d576020015182811681036200059d576370a0823160e01b6000528060045260206000602481855afa15620005a6576000516200007e8162000604565b926200008e6040519485620005ca565b818452601f196200009f8362000604565b01366020860137620000b18262000604565b92620000c16040519485620005ca565b828452601f19620000d28462000604565b0160005b818110620005b057505060005b8381106200029f5785858860405180926020820194606080840190604088528251809252608091602083870194019060005b8181106200028557505050601f19858403016040860152602080855194858152019401956000925b848410620001605789876200015c818903601f198101835282620005ca565b5190f35b8751805180516001600160601b031688526020818101518516818a01526040828101518616818b01528287015186168a8801528285015162ffffff168a86015260a080840151600290810b828d015260c080860151820b818e015260e0808701516001600160801b03908116918f019190915261010080880151908f015261012080880151908f0152610140808801518216908f0152610160968701518116968e01969096528685015180518a166101808f01528086015190920b6101a08e01528184015161ffff9081166101c08f0152828b015181166101e08f015282890151166102008e01529181015160ff166102208d0152015115156102408b015290920151166102608801529790970196889650610280909501946001909301926200013d565b825186528997506020958601959092019160010162000115565b632f745c5960e01b600052816004528060245260206000604481865afa15620005a65760005190600060245281620002d8828962000713565b52620002e3620006d1565b91620002ee6200061c565b9063133f757160e31b6000526004526101808160246000885afa15620005a257825263c45a015560e01b60005260206000600481875afa156200059d5760005191805192896040850151169362ffffff60808c60608401511692015116906040519560005260205260405260606000209060ff60a01b176000526020527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54604052886055600b201692604052630d34328160e11b60005260206000600481865afa156200059d576000516001600160801b03166040820152620003d062000688565b633850c7bd60e01b60005260e08160046000875afa156200059d5760208201819052815160e08101519094906001600160801b031662000432575b5050600192506200041d828862000713565b526200042a818762000713565b5001620000e3565b60a0850151602060c0600292830b970151820b930151900b916200045786836200073e565b926200046482846200073e565b968112156200050f5750505061016060019460608060408501516040840151900394015191015190035b620004ef84519361010085015190039160e0850192620004be898060801b03918a8060801b0386511690620007b4565b610140870180519190921660808b901b8b9003918216018116909152610120860151935190939084169103620007b4565b16910190848060801b0390858060801b038351160116905238806200040b565b126200053a57509261016060019460608060408501516040840151900394015191015190036200048e565b9063f305839960e01b60005260206000600481855afa156200059d576020600060048180516040860151900360408a0151900395634614131960e01b82525afa156200059d5760019460606101609281600051910151900391015190036200048e565b600080fd5b3d90fd5b3d6000803e3d6000fd5b602090620005bd620006d1565b82828901015201620000d6565b601f909101601f19168101906001600160401b03821190821017620005ee57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b038111620005ee5760051b60200190565b6040519061018082016001600160401b03811183821017620005ee57604052816101606000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201528261010082015282610120820152826101408201520152565b6040519060e082016001600160401b03811183821017620005ee576040528160c06000918281528260208201528260408201528260608201528260808201528260a08201520152565b60405190606082016001600160401b03811183821017620005ee576040526000604083620006fe6200061c565b81526200070a62000688565b60208201520152565b8051821015620007285760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b604051919291610100908181016001600160401b03811182821017620005ee576040526024600080948184528160208501528160408501528160608501528160808501528160a08501528160c08501528160e0850152839763f30dba9360e01b835260020b6004525afa15620007b15750565b80fd5b60008282029260001981840992848410850180850394146200080057600160801b9284841115620007f35750096080918382119003821b9203901c1790565b63ae47f70290526004601cfd5b5050505060801c9056fe";

type EphemeralAllPositionsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EphemeralAllPositionsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EphemeralAllPositions__factory extends ContractFactory {
  constructor(...args: EphemeralAllPositionsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    npm: string,
    owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<EphemeralAllPositions> {
    return super.deploy(
      npm,
      owner,
      overrides || {}
    ) as Promise<EphemeralAllPositions>;
  }
  override getDeployTransaction(
    npm: string,
    owner: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(npm, owner, overrides || {});
  }
  override attach(address: string): EphemeralAllPositions {
    return super.attach(address) as EphemeralAllPositions;
  }
  override connect(signer: Signer): EphemeralAllPositions__factory {
    return super.connect(signer) as EphemeralAllPositions__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EphemeralAllPositionsInterface {
    return new utils.Interface(_abi) as EphemeralAllPositionsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EphemeralAllPositions {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as EphemeralAllPositions;
  }
}
