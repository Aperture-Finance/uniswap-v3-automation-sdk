/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OptimalSwap,
  OptimalSwapInterface,
} from "../../../src/libraries/OptimalSwap";

const _abi = [
  {
    inputs: [],
    name: "Invalid_Pool",
    type: "error",
  },
  {
    inputs: [],
    name: "Invalid_Tick_Range",
    type: "error",
  },
  {
    inputs: [],
    name: "Math_Overflow",
    type: "error",
  },
] as const;

const _bytecode =
  "0x6080806040523460175760119081601d823930815050f35b600080fdfe600080fdfea164736f6c6343000816000a";

type OptimalSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OptimalSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OptimalSwap__factory extends ContractFactory {
  constructor(...args: OptimalSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<OptimalSwap> {
    return super.deploy(overrides || {}) as Promise<OptimalSwap>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OptimalSwap {
    return super.attach(address) as OptimalSwap;
  }
  override connect(signer: Signer): OptimalSwap__factory {
    return super.connect(signer) as OptimalSwap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OptimalSwapInterface {
    return new utils.Interface(_abi) as OptimalSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OptimalSwap {
    return new Contract(address, _abi, signerOrProvider) as OptimalSwap;
  }
}
