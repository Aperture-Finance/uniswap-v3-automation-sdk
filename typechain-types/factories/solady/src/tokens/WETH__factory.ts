/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { WETH, WETHInterface } from "../../../../solady/src/tokens/WETH";

const _abi = [
  {
    inputs: [],
    name: "AllowanceOverflow",
    type: "error",
  },
  {
    inputs: [],
    name: "AllowanceUnderflow",
    type: "error",
  },
  {
    inputs: [],
    name: "ETHTransferFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidPermit",
    type: "error",
  },
  {
    inputs: [],
    name: "PermitExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "TotalSupplyOverflow",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawal",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "result",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "difference",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "difference",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610c30908161001c8239f35b600080fdfe60406080815260049081361015610028575b5050361561001e57600080fd5b610026610b88565b005b600091823560e01c90816306fdde0314610985578163095ea7b3146108fd57816318160ddd146108b857816323b872dd1461078f5781632e1a7d4d146106b4578163313ce5671461067a5781633644e51514610638578163395093511461059757816370a08231146105455781637ecebe00146104f357816395d89b411461043f578163a457c2d71461039d578163a9059cbb146102f4578163d0e30db0146102bc578163d505accf1461013f575063dd62ed3e03610011573461013b57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261013b5760209161011a610a54565b90610123610a7c565b8452637f5e9f20600c52526034600c20549051908152f35b5080fd5b83833461013b5760e07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261013b57610178610a54565b90610181610a7c565b90604435606435906084359260ff841684036102b85761019f610a9f565b938151968442116102ac5760c09073ffffffffffffffffffffffffffffffffffffffff8091169716976338377508600c52878a5260209687600c20968754976001890190557f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9835289898401528a868401526060830197878952608084015260a08301526119018b5287522082526042601e20885260ff16845260a435815260c435606052838060808960015afa50843d51036102a057777f5e9f200000000000000000000000000000000000000000861790526034602c20557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259190a380f35b8763ddafbaef8852601cfd5b89631a15a3cc8a52601cfd5b8680fd5b83807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102f1576102ee610b88565b80f35b80fd5b8284346102f157817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102f15761032c610a54565b602435916387a211a2600c5233815260209485600c2090815490818611610392575084900390555282600c208181540190558252600c5160601c337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8480a35160018152f35b63f4d678b88452601cfd5b8284346102f157817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102f1576103d5610a54565b60243590602052637f5e9f20600c523382526034600c209081548181106104335760209550038091558152602c5160601c907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b85638301ab388552601cfd5b83833461013b57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261013b578051918183019083821067ffffffffffffffff8311176104c75750926104c393825282527f5745544800000000000000000000000000000000000000000000000000000000602083015251918291826109ee565b0390f35b806041867f4e487b71000000000000000000000000000000000000000000000000000000006024945252fd5b50503461013b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261013b5760209161052f610a54565b906338377508600c525281600c20549051908152f35b50503461013b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261013b57602091610581610a54565b906387a211a2600c525281600c20549051908152f35b8284346102f157817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102f1576105cf610a54565b602052637f5e9f20600c523381526034600c2092835490602435820191821061062d575080602094558152602c5160601c907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b63f90670668352601cfd5b50503461013b57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261013b57602090610673610a9f565b9051908152f35b50503461013b57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261013b576020905160128152f35b83903461013b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261013b5780356387a211a2600c523383526020600c208054808311610783578483819493829483940390556805345cdf77eb68f44c81815403905580825281337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602083a3337f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65602084a2335af115610778575080f35b63b12d13eb8252601cfd5b8363f4d678b88652601cfd5b83833461013b5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261013b576107c8610a54565b6107d0610a7c565b6044358260601b91602095338752600c93637f5e9f20811785526034852080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103610895575b50506387a211a217845286842080549889851161088a57508373ffffffffffffffffffffffffffffffffffffffff969798990390555285822081815401905585525160601c91167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8480a35160018152f35b63f4d678b88352601cfd5b8086116108ac5785900390556387a211a28a610818565b8a6313be252b8552601cfd5b50503461013b57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261013b576020906805345cdf77eb68f44c549051908152f35b50503461013b57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261013b57602091610938610a54565b602435908452637f5e9f20600c52338252806034600c20558152602c5160601c907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b50503461013b57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261013b576104c3906109c1610b35565b907f5772617070656420457468657200000000000000000000000000000000000000602083015251918291825b60208082528251818301819052939260005b858110610a40575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006040809697860101520116010190565b818101830151848201604001528201610a00565b6004359073ffffffffffffffffffffffffffffffffffffffff82168203610a7757565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff82168203610a7757565b60a0604051610aac610b35565b60208101907f577261707065642045746865720000000000000000000000000000000000000082525190207f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f825260208201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660408201524660608201523060808201522090565b604051906040820182811067ffffffffffffffff821117610b5957604052600d8252565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6805345cdf77eb68f44c805490348201918210610c1557556387a211a2600c52336000526020600c2034815401905534602052600c5160601c60007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602080a334600052337fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c60206000a2565b63e5cfe9576000526004601cfdfea164736f6c6343000814000a";

type WETHConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WETHConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WETH__factory extends ContractFactory {
  constructor(...args: WETHConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: string }): Promise<WETH> {
    return super.deploy(overrides || {}) as Promise<WETH>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): WETH {
    return super.attach(address) as WETH;
  }
  override connect(signer: Signer): WETH__factory {
    return super.connect(signer) as WETH__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WETHInterface {
    return new utils.Interface(_abi) as WETHInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): WETH {
    return new Contract(address, _abi, signerOrProvider) as WETH;
  }
}
