/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  FixedPointMathLib,
  FixedPointMathLibInterface,
} from "../../../../../lib/solady/src/utils/FixedPointMathLib";

const _abi = [
  {
    inputs: [],
    name: "DivFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "DivWadFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "ExpOverflow",
    type: "error",
  },
  {
    inputs: [],
    name: "FactorialOverflow",
    type: "error",
  },
  {
    inputs: [],
    name: "FullMulDivFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "LnWadUndefined",
    type: "error",
  },
  {
    inputs: [],
    name: "Log2Undefined",
    type: "error",
  },
  {
    inputs: [],
    name: "MulDivFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "MulWadFailed",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207c661296748ab765bb52afd878531a12f2999ec063006ed42de4c7136f15390b64736f6c63430008120033";

type FixedPointMathLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FixedPointMathLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FixedPointMathLib__factory extends ContractFactory {
  constructor(...args: FixedPointMathLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FixedPointMathLib> {
    return super.deploy(overrides || {}) as Promise<FixedPointMathLib>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FixedPointMathLib {
    return super.attach(address) as FixedPointMathLib;
  }
  override connect(signer: Signer): FixedPointMathLib__factory {
    return super.connect(signer) as FixedPointMathLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FixedPointMathLibInterface {
    return new utils.Interface(_abi) as FixedPointMathLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FixedPointMathLib {
    return new Contract(address, _abi, signerOrProvider) as FixedPointMathLib;
  }
}
