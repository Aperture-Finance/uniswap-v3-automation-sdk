/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export type PositionFullStruct = {
  nonce: BigNumberish;
  operator: string;
  token0: string;
  token1: string;
  fee: BigNumberish;
  tickLower: BigNumberish;
  tickUpper: BigNumberish;
  liquidity: BigNumberish;
  feeGrowthInside0LastX128: BigNumberish;
  feeGrowthInside1LastX128: BigNumberish;
  tokensOwed0: BigNumberish;
  tokensOwed1: BigNumberish;
};

export type PositionFullStructOutput = [
  BigNumber,
  string,
  string,
  string,
  number,
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  nonce: BigNumber;
  operator: string;
  token0: string;
  token1: string;
  fee: number;
  tickLower: number;
  tickUpper: number;
  liquidity: BigNumber;
  feeGrowthInside0LastX128: BigNumber;
  feeGrowthInside1LastX128: BigNumber;
  tokensOwed0: BigNumber;
  tokensOwed1: BigNumber;
};

export type Slot0Struct = {
  sqrtPriceX96: BigNumberish;
  tick: BigNumberish;
  observationIndex: BigNumberish;
  observationCardinality: BigNumberish;
  observationCardinalityNext: BigNumberish;
  feeProtocol: BigNumberish;
  unlocked: boolean;
};

export type Slot0StructOutput = [
  BigNumber,
  number,
  number,
  number,
  number,
  number,
  boolean
] & {
  sqrtPriceX96: BigNumber;
  tick: number;
  observationIndex: number;
  observationCardinality: number;
  observationCardinalityNext: number;
  feeProtocol: number;
  unlocked: boolean;
};

export type PositionStateStruct = {
  tokenId: BigNumberish;
  position: PositionFullStruct;
  slot0: Slot0Struct;
  activeLiquidity: BigNumberish;
  decimals0: BigNumberish;
  decimals1: BigNumberish;
};

export type PositionStateStructOutput = [
  BigNumber,
  PositionFullStructOutput,
  Slot0StructOutput,
  BigNumber,
  number,
  number
] & {
  tokenId: BigNumber;
  position: PositionFullStructOutput;
  slot0: Slot0StructOutput;
  activeLiquidity: BigNumber;
  decimals0: number;
  decimals1: number;
};

export interface EphemeralAllPositionsInterface extends utils.Interface {
  functions: {
    "allPositions(address,address)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "allPositions"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allPositions",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "allPositions",
    data: BytesLike
  ): Result;

  events: {};
}

export interface EphemeralAllPositions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EphemeralAllPositionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allPositions(
      npm: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [PositionStateStructOutput[]] & { positions: PositionStateStructOutput[] }
    >;
  };

  allPositions(
    npm: string,
    owner: string,
    overrides?: CallOverrides
  ): Promise<PositionStateStructOutput[]>;

  callStatic: {
    allPositions(
      npm: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PositionStateStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    allPositions(
      npm: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allPositions(
      npm: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
