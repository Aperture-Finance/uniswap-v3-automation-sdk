/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type RangeStruct = {
  lowerTick: PromiseOrValue<BigNumberish>;
  upperTick: PromiseOrValue<BigNumberish>;
  feeTier: PromiseOrValue<BigNumberish>;
};

export type RangeStructOutput = [number, number, number] & {
  lowerTick: number;
  upperTick: number;
  feeTier: number;
};

export type PositionLiquidityStruct = {
  liquidity: PromiseOrValue<BigNumberish>;
  range: RangeStruct;
};

export type PositionLiquidityStructOutput = [BigNumber, RangeStructOutput] & {
  liquidity: BigNumber;
  range: RangeStructOutput;
};

export type SwapPayloadStruct = {
  payload: PromiseOrValue<BytesLike>;
  router: PromiseOrValue<string>;
  amountIn: PromiseOrValue<BigNumberish>;
  expectedMinReturn: PromiseOrValue<BigNumberish>;
  zeroForOne: PromiseOrValue<boolean>;
};

export type SwapPayloadStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  boolean
] & {
  payload: string;
  router: string;
  amountIn: BigNumber;
  expectedMinReturn: BigNumber;
  zeroForOne: boolean;
};

export type RebalanceStruct = {
  burns: PositionLiquidityStruct[];
  mints: PositionLiquidityStruct[];
  swap: SwapPayloadStruct;
  minBurn0: PromiseOrValue<BigNumberish>;
  minBurn1: PromiseOrValue<BigNumberish>;
  minDeposit0: PromiseOrValue<BigNumberish>;
  minDeposit1: PromiseOrValue<BigNumberish>;
};

export type RebalanceStructOutput = [
  PositionLiquidityStructOutput[],
  PositionLiquidityStructOutput[],
  SwapPayloadStructOutput,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  burns: PositionLiquidityStructOutput[];
  mints: PositionLiquidityStructOutput[];
  swap: SwapPayloadStructOutput;
  minBurn0: BigNumber;
  minBurn1: BigNumber;
  minDeposit0: BigNumber;
  minDeposit1: BigNumber;
};

export type InitializePayloadStruct = {
  feeTiers: PromiseOrValue<BigNumberish>[];
  token0: PromiseOrValue<string>;
  token1: PromiseOrValue<string>;
  owner: PromiseOrValue<string>;
  init0: PromiseOrValue<BigNumberish>;
  init1: PromiseOrValue<BigNumberish>;
  feeCollector: PromiseOrValue<string>;
  managers: PromiseOrValue<string>[];
  routers: PromiseOrValue<string>[];
};

export type InitializePayloadStructOutput = [
  number[],
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  string[],
  string[]
] & {
  feeTiers: number[];
  token0: string;
  token1: string;
  owner: string;
  init0: BigNumber;
  init1: BigNumber;
  feeCollector: string;
  managers: string[];
  routers: string[];
};

export interface ApertureMMVaultInterface extends utils.Interface {
  functions: {
    "addPools(uint24[])": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blacklistRouters(address[])": FunctionFragment;
    "burn(uint256,address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "getPools()": FunctionFragment;
    "getRanges()": FunctionFragment;
    "getRouters()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "init0()": FunctionFragment;
    "init1()": FunctionFragment;
    "initialize(string,string,(uint24[],address,address,address,uint256,uint256,address,address[],address[]))": FunctionFragment;
    "managerBalance0()": FunctionFragment;
    "managerBalance1()": FunctionFragment;
    "managerFeeBPS()": FunctionFragment;
    "managers(address)": FunctionFragment;
    "mint(uint256,address)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "rebalance(((uint128,(int24,int24,uint24))[],(uint128,(int24,int24,uint24))[],(bytes,address,uint256,uint256,bool),uint256,uint256,uint256,uint256))": FunctionFragment;
    "removePools(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "restrictedMint()": FunctionFragment;
    "setInits(uint256,uint256)": FunctionFragment;
    "setManagerFeeBPS(uint16)": FunctionFragment;
    "setManagers(address[],bool[])": FunctionFragment;
    "setRestrictedMint(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "token0()": FunctionFragment;
    "token1()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV3MintCallback(uint256,uint256,bytes)": FunctionFragment;
    "whitelistRouters(address[])": FunctionFragment;
    "withdrawManagerBalance()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPools"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "blacklistRouters"
      | "burn"
      | "decimals"
      | "decreaseAllowance"
      | "factory"
      | "feeCollector"
      | "getPools"
      | "getRanges"
      | "getRouters"
      | "increaseAllowance"
      | "init0"
      | "init1"
      | "initialize"
      | "managerBalance0"
      | "managerBalance1"
      | "managerFeeBPS"
      | "managers"
      | "mint"
      | "name"
      | "owner"
      | "rebalance"
      | "removePools"
      | "renounceOwnership"
      | "restrictedMint"
      | "setInits"
      | "setManagerFeeBPS"
      | "setManagers"
      | "setRestrictedMint"
      | "symbol"
      | "token0"
      | "token1"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "uniswapV3MintCallback"
      | "whitelistRouters"
      | "withdrawManagerBalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPools",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistRouters",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPools", values?: undefined): string;
  encodeFunctionData(functionFragment: "getRanges", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRouters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "init0", values?: undefined): string;
  encodeFunctionData(functionFragment: "init1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      InitializePayloadStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "managerBalance0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managerBalance1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managerFeeBPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [RebalanceStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removePools",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "restrictedMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setInits",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagerFeeBPS",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagers",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRestrictedMint",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3MintCallback",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistRouters",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawManagerBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklistRouters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRanges", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRouters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "managerBalance0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerBalance1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerFeeBPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "managers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restrictedMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setInits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setManagerFeeBPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRestrictedMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3MintCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistRouters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawManagerBalance",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LPBurned(address,uint256,uint256)": EventFragment;
    "LogAddPools(uint24[])": EventFragment;
    "LogBlacklistRouters(address[])": EventFragment;
    "LogBurn(address,uint256,uint256,uint256)": EventFragment;
    "LogCollectedFees(uint256,uint256)": EventFragment;
    "LogMint(address,uint256,uint256,uint256)": EventFragment;
    "LogRebalance(tuple,uint256,uint256)": EventFragment;
    "LogRemovePools(address[])": EventFragment;
    "LogRestrictedMint(address)": EventFragment;
    "LogSetInits(uint256,uint256)": EventFragment;
    "LogSetManagerFeeBPS(uint16)": EventFragment;
    "LogSetManagers(address[],bool[])": EventFragment;
    "LogWhitelistRouters(address[])": EventFragment;
    "LogWithdrawManagerBalance(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LPBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAddPools"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBlacklistRouters"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogCollectedFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRebalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemovePools"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRestrictedMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetInits"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetManagerFeeBPS"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetManagers"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWhitelistRouters"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdrawManagerBalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LPBurnedEventObject {
  user: string;
  burnAmount0: BigNumber;
  burnAmount1: BigNumber;
}
export type LPBurnedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LPBurnedEventObject
>;

export type LPBurnedEventFilter = TypedEventFilter<LPBurnedEvent>;

export interface LogAddPoolsEventObject {
  feeTiers: number[];
}
export type LogAddPoolsEvent = TypedEvent<[number[]], LogAddPoolsEventObject>;

export type LogAddPoolsEventFilter = TypedEventFilter<LogAddPoolsEvent>;

export interface LogBlacklistRoutersEventObject {
  routers: string[];
}
export type LogBlacklistRoutersEvent = TypedEvent<
  [string[]],
  LogBlacklistRoutersEventObject
>;

export type LogBlacklistRoutersEventFilter =
  TypedEventFilter<LogBlacklistRoutersEvent>;

export interface LogBurnEventObject {
  receiver: string;
  burnAmount: BigNumber;
  amount0Out: BigNumber;
  amount1Out: BigNumber;
}
export type LogBurnEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  LogBurnEventObject
>;

export type LogBurnEventFilter = TypedEventFilter<LogBurnEvent>;

export interface LogCollectedFeesEventObject {
  fee0: BigNumber;
  fee1: BigNumber;
}
export type LogCollectedFeesEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogCollectedFeesEventObject
>;

export type LogCollectedFeesEventFilter =
  TypedEventFilter<LogCollectedFeesEvent>;

export interface LogMintEventObject {
  receiver: string;
  mintAmount: BigNumber;
  amount0In: BigNumber;
  amount1In: BigNumber;
}
export type LogMintEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  LogMintEventObject
>;

export type LogMintEventFilter = TypedEventFilter<LogMintEvent>;

export interface LogRebalanceEventObject {
  rebalanceParams: RebalanceStructOutput;
  swapDelta0: BigNumber;
  swapDelta1: BigNumber;
}
export type LogRebalanceEvent = TypedEvent<
  [RebalanceStructOutput, BigNumber, BigNumber],
  LogRebalanceEventObject
>;

export type LogRebalanceEventFilter = TypedEventFilter<LogRebalanceEvent>;

export interface LogRemovePoolsEventObject {
  pools: string[];
}
export type LogRemovePoolsEvent = TypedEvent<
  [string[]],
  LogRemovePoolsEventObject
>;

export type LogRemovePoolsEventFilter = TypedEventFilter<LogRemovePoolsEvent>;

export interface LogRestrictedMintEventObject {
  minter: string;
}
export type LogRestrictedMintEvent = TypedEvent<
  [string],
  LogRestrictedMintEventObject
>;

export type LogRestrictedMintEventFilter =
  TypedEventFilter<LogRestrictedMintEvent>;

export interface LogSetInitsEventObject {
  init0: BigNumber;
  init1: BigNumber;
}
export type LogSetInitsEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogSetInitsEventObject
>;

export type LogSetInitsEventFilter = TypedEventFilter<LogSetInitsEvent>;

export interface LogSetManagerFeeBPSEventObject {
  managerFeeBPS: number;
}
export type LogSetManagerFeeBPSEvent = TypedEvent<
  [number],
  LogSetManagerFeeBPSEventObject
>;

export type LogSetManagerFeeBPSEventFilter =
  TypedEventFilter<LogSetManagerFeeBPSEvent>;

export interface LogSetManagersEventObject {
  newManagers: string[];
  statuses: boolean[];
}
export type LogSetManagersEvent = TypedEvent<
  [string[], boolean[]],
  LogSetManagersEventObject
>;

export type LogSetManagersEventFilter = TypedEventFilter<LogSetManagersEvent>;

export interface LogWhitelistRoutersEventObject {
  routers: string[];
}
export type LogWhitelistRoutersEvent = TypedEvent<
  [string[]],
  LogWhitelistRoutersEventObject
>;

export type LogWhitelistRoutersEventFilter =
  TypedEventFilter<LogWhitelistRoutersEvent>;

export interface LogWithdrawManagerBalanceEventObject {
  amount0: BigNumber;
  amount1: BigNumber;
}
export type LogWithdrawManagerBalanceEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogWithdrawManagerBalanceEventObject
>;

export type LogWithdrawManagerBalanceEventFilter =
  TypedEventFilter<LogWithdrawManagerBalanceEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ApertureMMVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ApertureMMVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPools(
      feeTiers_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    blacklistRouters(
      routers_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burn(
      burnAmount_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    getPools(overrides?: CallOverrides): Promise<[string[]]>;

    getRanges(overrides?: CallOverrides): Promise<[RangeStructOutput[]]>;

    getRouters(overrides?: CallOverrides): Promise<[string[]]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    init0(overrides?: CallOverrides): Promise<[BigNumber]>;

    init1(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      params_: InitializePayloadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    managerBalance0(overrides?: CallOverrides): Promise<[BigNumber]>;

    managerBalance1(overrides?: CallOverrides): Promise<[BigNumber]>;

    managerFeeBPS(overrides?: CallOverrides): Promise<[number]>;

    managers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      mintAmount_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rebalance(
      rebalanceParams_: RebalanceStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removePools(
      pools_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    restrictedMint(overrides?: CallOverrides): Promise<[string]>;

    setInits(
      init0_: PromiseOrValue<BigNumberish>,
      init1_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setManagerFeeBPS(
      managerFeeBPS_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setManagers(
      managers_: PromiseOrValue<string>[],
      statuses_: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRestrictedMint(
      minter_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    token0(overrides?: CallOverrides): Promise<[string]>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniswapV3MintCallback(
      amount0Owed_: PromiseOrValue<BigNumberish>,
      amount1Owed_: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistRouters(
      routers_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawManagerBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addPools(
    feeTiers_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  blacklistRouters(
    routers_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burn(
    burnAmount_: PromiseOrValue<BigNumberish>,
    receiver_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  getPools(overrides?: CallOverrides): Promise<string[]>;

  getRanges(overrides?: CallOverrides): Promise<RangeStructOutput[]>;

  getRouters(overrides?: CallOverrides): Promise<string[]>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  init0(overrides?: CallOverrides): Promise<BigNumber>;

  init1(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    params_: InitializePayloadStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  managerBalance0(overrides?: CallOverrides): Promise<BigNumber>;

  managerBalance1(overrides?: CallOverrides): Promise<BigNumber>;

  managerFeeBPS(overrides?: CallOverrides): Promise<number>;

  managers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    mintAmount_: PromiseOrValue<BigNumberish>,
    receiver_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  rebalance(
    rebalanceParams_: RebalanceStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removePools(
    pools_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  restrictedMint(overrides?: CallOverrides): Promise<string>;

  setInits(
    init0_: PromiseOrValue<BigNumberish>,
    init1_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setManagerFeeBPS(
    managerFeeBPS_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setManagers(
    managers_: PromiseOrValue<string>[],
    statuses_: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRestrictedMint(
    minter_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  token0(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniswapV3MintCallback(
    amount0Owed_: PromiseOrValue<BigNumberish>,
    amount1Owed_: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistRouters(
    routers_: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawManagerBalance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPools(
      feeTiers_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blacklistRouters(
      routers_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    burn(
      burnAmount_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    factory(overrides?: CallOverrides): Promise<string>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    getPools(overrides?: CallOverrides): Promise<string[]>;

    getRanges(overrides?: CallOverrides): Promise<RangeStructOutput[]>;

    getRouters(overrides?: CallOverrides): Promise<string[]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    init0(overrides?: CallOverrides): Promise<BigNumber>;

    init1(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      params_: InitializePayloadStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    managerBalance0(overrides?: CallOverrides): Promise<BigNumber>;

    managerBalance1(overrides?: CallOverrides): Promise<BigNumber>;

    managerFeeBPS(overrides?: CallOverrides): Promise<number>;

    managers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      mintAmount_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    rebalance(
      rebalanceParams_: RebalanceStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    removePools(
      pools_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    restrictedMint(overrides?: CallOverrides): Promise<string>;

    setInits(
      init0_: PromiseOrValue<BigNumberish>,
      init1_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setManagerFeeBPS(
      managerFeeBPS_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setManagers(
      managers_: PromiseOrValue<string>[],
      statuses_: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRestrictedMint(
      minter_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    token0(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3MintCallback(
      amount0Owed_: PromiseOrValue<BigNumberish>,
      amount1Owed_: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistRouters(
      routers_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawManagerBalance(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LPBurned(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      burnAmount0?: null,
      burnAmount1?: null
    ): LPBurnedEventFilter;
    LPBurned(
      user?: PromiseOrValue<string> | null,
      burnAmount0?: null,
      burnAmount1?: null
    ): LPBurnedEventFilter;

    "LogAddPools(uint24[])"(feeTiers?: null): LogAddPoolsEventFilter;
    LogAddPools(feeTiers?: null): LogAddPoolsEventFilter;

    "LogBlacklistRouters(address[])"(
      routers?: null
    ): LogBlacklistRoutersEventFilter;
    LogBlacklistRouters(routers?: null): LogBlacklistRoutersEventFilter;

    "LogBurn(address,uint256,uint256,uint256)"(
      receiver?: PromiseOrValue<string> | null,
      burnAmount?: null,
      amount0Out?: null,
      amount1Out?: null
    ): LogBurnEventFilter;
    LogBurn(
      receiver?: PromiseOrValue<string> | null,
      burnAmount?: null,
      amount0Out?: null,
      amount1Out?: null
    ): LogBurnEventFilter;

    "LogCollectedFees(uint256,uint256)"(
      fee0?: null,
      fee1?: null
    ): LogCollectedFeesEventFilter;
    LogCollectedFees(fee0?: null, fee1?: null): LogCollectedFeesEventFilter;

    "LogMint(address,uint256,uint256,uint256)"(
      receiver?: PromiseOrValue<string> | null,
      mintAmount?: null,
      amount0In?: null,
      amount1In?: null
    ): LogMintEventFilter;
    LogMint(
      receiver?: PromiseOrValue<string> | null,
      mintAmount?: null,
      amount0In?: null,
      amount1In?: null
    ): LogMintEventFilter;

    "LogRebalance(tuple,uint256,uint256)"(
      rebalanceParams?: null,
      swapDelta0?: null,
      swapDelta1?: null
    ): LogRebalanceEventFilter;
    LogRebalance(
      rebalanceParams?: null,
      swapDelta0?: null,
      swapDelta1?: null
    ): LogRebalanceEventFilter;

    "LogRemovePools(address[])"(pools?: null): LogRemovePoolsEventFilter;
    LogRemovePools(pools?: null): LogRemovePoolsEventFilter;

    "LogRestrictedMint(address)"(minter?: null): LogRestrictedMintEventFilter;
    LogRestrictedMint(minter?: null): LogRestrictedMintEventFilter;

    "LogSetInits(uint256,uint256)"(
      init0?: null,
      init1?: null
    ): LogSetInitsEventFilter;
    LogSetInits(init0?: null, init1?: null): LogSetInitsEventFilter;

    "LogSetManagerFeeBPS(uint16)"(
      managerFeeBPS?: null
    ): LogSetManagerFeeBPSEventFilter;
    LogSetManagerFeeBPS(managerFeeBPS?: null): LogSetManagerFeeBPSEventFilter;

    "LogSetManagers(address[],bool[])"(
      newManagers?: null,
      statuses?: null
    ): LogSetManagersEventFilter;
    LogSetManagers(
      newManagers?: null,
      statuses?: null
    ): LogSetManagersEventFilter;

    "LogWhitelistRouters(address[])"(
      routers?: null
    ): LogWhitelistRoutersEventFilter;
    LogWhitelistRouters(routers?: null): LogWhitelistRoutersEventFilter;

    "LogWithdrawManagerBalance(uint256,uint256)"(
      amount0?: null,
      amount1?: null
    ): LogWithdrawManagerBalanceEventFilter;
    LogWithdrawManagerBalance(
      amount0?: null,
      amount1?: null
    ): LogWithdrawManagerBalanceEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    addPools(
      feeTiers_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blacklistRouters(
      routers_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burn(
      burnAmount_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getPools(overrides?: CallOverrides): Promise<BigNumber>;

    getRanges(overrides?: CallOverrides): Promise<BigNumber>;

    getRouters(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    init0(overrides?: CallOverrides): Promise<BigNumber>;

    init1(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      params_: InitializePayloadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    managerBalance0(overrides?: CallOverrides): Promise<BigNumber>;

    managerBalance1(overrides?: CallOverrides): Promise<BigNumber>;

    managerFeeBPS(overrides?: CallOverrides): Promise<BigNumber>;

    managers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      mintAmount_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(
      rebalanceParams_: RebalanceStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removePools(
      pools_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    restrictedMint(overrides?: CallOverrides): Promise<BigNumber>;

    setInits(
      init0_: PromiseOrValue<BigNumberish>,
      init1_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setManagerFeeBPS(
      managerFeeBPS_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setManagers(
      managers_: PromiseOrValue<string>[],
      statuses_: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRestrictedMint(
      minter_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniswapV3MintCallback(
      amount0Owed_: PromiseOrValue<BigNumberish>,
      amount1Owed_: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistRouters(
      routers_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawManagerBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPools(
      feeTiers_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklistRouters(
      routers_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      burnAmount_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRanges(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRouters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    init0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      params_: InitializePayloadStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    managerBalance0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managerBalance1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managerFeeBPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      mintAmount_: PromiseOrValue<BigNumberish>,
      receiver_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalance(
      rebalanceParams_: RebalanceStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removePools(
      pools_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    restrictedMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setInits(
      init0_: PromiseOrValue<BigNumberish>,
      init1_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setManagerFeeBPS(
      managerFeeBPS_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setManagers(
      managers_: PromiseOrValue<string>[],
      statuses_: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRestrictedMint(
      minter_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniswapV3MintCallback(
      amount0Owed_: PromiseOrValue<BigNumberish>,
      amount1Owed_: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistRouters(
      routers_: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawManagerBalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
