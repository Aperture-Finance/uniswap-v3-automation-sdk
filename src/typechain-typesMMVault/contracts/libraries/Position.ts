/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export type RangeStruct = {
  lowerTick: BigNumberish;
  upperTick: BigNumberish;
  feeTier: BigNumberish;
};

export type RangeStructOutput = [number, number, number] & {
  lowerTick: number;
  upperTick: number;
  feeTier: number;
};

export interface PositionInterface extends utils.Interface {
  functions: {
    "getLiquidityByRange(IUniswapV3Pool,address,int24,int24)": FunctionFragment;
    "getPositionId(address,int24,int24)": FunctionFragment;
    "rangeExists((int24,int24,uint24)[],(int24,int24,uint24))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getLiquidityByRange"
      | "getPositionId"
      | "rangeExists"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getLiquidityByRange",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionId",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rangeExists",
    values: [RangeStruct[], RangeStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getLiquidityByRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rangeExists",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Position extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PositionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getLiquidityByRange(
      pool_: string,
      self_: string,
      lowerTick_: BigNumberish,
      upperTick_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>;

    getPositionId(
      self_: string,
      lowerTick_: BigNumberish,
      upperTick_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { positionId: string }>;

    rangeExists(
      currentRanges_: RangeStruct[],
      range_: RangeStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { ok: boolean; index: BigNumber }>;
  };

  getLiquidityByRange(
    pool_: string,
    self_: string,
    lowerTick_: BigNumberish,
    upperTick_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPositionId(
    self_: string,
    lowerTick_: BigNumberish,
    upperTick_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  rangeExists(
    currentRanges_: RangeStruct[],
    range_: RangeStruct,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { ok: boolean; index: BigNumber }>;

  callStatic: {
    getLiquidityByRange(
      pool_: string,
      self_: string,
      lowerTick_: BigNumberish,
      upperTick_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionId(
      self_: string,
      lowerTick_: BigNumberish,
      upperTick_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    rangeExists(
      currentRanges_: RangeStruct[],
      range_: RangeStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { ok: boolean; index: BigNumber }>;
  };

  filters: {};

  estimateGas: {
    getLiquidityByRange(
      pool_: string,
      self_: string,
      lowerTick_: BigNumberish,
      upperTick_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionId(
      self_: string,
      lowerTick_: BigNumberish,
      upperTick_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rangeExists(
      currentRanges_: RangeStruct[],
      range_: RangeStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getLiquidityByRange(
      pool_: string,
      self_: string,
      lowerTick_: BigNumberish,
      upperTick_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionId(
      self_: string,
      lowerTick_: BigNumberish,
      upperTick_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rangeExists(
      currentRanges_: RangeStruct[],
      range_: RangeStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
