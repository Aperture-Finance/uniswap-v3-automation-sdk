/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export type RangeStruct = {
  lowerTick: BigNumberish;
  upperTick: BigNumberish;
  feeTier: BigNumberish;
};

export type RangeStructOutput = [number, number, number] & {
  lowerTick: number;
  upperTick: number;
  feeTier: number;
};

export type AmountStruct = { range: RangeStruct; amount: BigNumberish };

export type AmountStructOutput = [RangeStructOutput, BigNumber] & {
  range: RangeStructOutput;
  amount: BigNumber;
};

export type PositionLiquidityStruct = {
  liquidity: BigNumberish;
  range: RangeStruct;
};

export type PositionLiquidityStructOutput = [BigNumber, RangeStructOutput] & {
  liquidity: BigNumber;
  range: RangeStructOutput;
};

export type UnderlyingOutputStruct = {
  amount0: BigNumberish;
  amount1: BigNumberish;
  fee0: BigNumberish;
  fee1: BigNumberish;
  leftOver0: BigNumberish;
  leftOver1: BigNumberish;
};

export type UnderlyingOutputStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  amount0: BigNumber;
  amount1: BigNumber;
  fee0: BigNumber;
  fee1: BigNumber;
  leftOver0: BigNumber;
  leftOver1: BigNumber;
};

export interface IApertureMMVaultHelperInterface extends utils.Interface {
  functions: {
    "token0AndToken1ByRange((int24,int24,uint24)[],address,address,address)": FunctionFragment;
    "token0AndToken1PlusFeesByRange((int24,int24,uint24)[],address,address,address)": FunctionFragment;
    "totalLiquidity(address)": FunctionFragment;
    "totalUnderlying(address)": FunctionFragment;
    "totalUnderlyingAtPrice(address,uint160)": FunctionFragment;
    "totalUnderlyingWithFees(address)": FunctionFragment;
    "totalUnderlyingWithFeesAndLeftOver(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "token0AndToken1ByRange"
      | "token0AndToken1PlusFeesByRange"
      | "totalLiquidity"
      | "totalUnderlying"
      | "totalUnderlyingAtPrice"
      | "totalUnderlyingWithFees"
      | "totalUnderlyingWithFeesAndLeftOver"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "token0AndToken1ByRange",
    values: [RangeStruct[], string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "token0AndToken1PlusFeesByRange",
    values: [RangeStruct[], string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLiquidity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnderlying",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnderlyingAtPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnderlyingWithFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnderlyingWithFeesAndLeftOver",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "token0AndToken1ByRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "token0AndToken1PlusFeesByRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnderlyingAtPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnderlyingWithFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnderlyingWithFeesAndLeftOver",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IApertureMMVaultHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IApertureMMVaultHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    token0AndToken1ByRange(
      ranges_: RangeStruct[],
      token0_: string,
      token1_: string,
      vaultV2_: string,
      overrides?: CallOverrides
    ): Promise<
      [AmountStructOutput[], AmountStructOutput[]] & {
        amount0s: AmountStructOutput[];
        amount1s: AmountStructOutput[];
      }
    >;

    token0AndToken1PlusFeesByRange(
      ranges_: RangeStruct[],
      token0_: string,
      token1_: string,
      vaultV2_: string,
      overrides?: CallOverrides
    ): Promise<
      [
        AmountStructOutput[],
        AmountStructOutput[],
        AmountStructOutput[],
        AmountStructOutput[]
      ] & {
        amount0s: AmountStructOutput[];
        amount1s: AmountStructOutput[];
        fee0s: AmountStructOutput[];
        fee1s: AmountStructOutput[];
      }
    >;

    totalLiquidity(
      vault_: string,
      overrides?: CallOverrides
    ): Promise<
      [PositionLiquidityStructOutput[]] & {
        liquidities: PositionLiquidityStructOutput[];
      }
    >;

    totalUnderlying(
      vault_: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    totalUnderlyingAtPrice(
      vault_: string,
      sqrtPriceX96_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    totalUnderlyingWithFees(
      vault_: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount0: BigNumber;
        amount1: BigNumber;
        fee0: BigNumber;
        fee1: BigNumber;
      }
    >;

    totalUnderlyingWithFeesAndLeftOver(
      vault_: string,
      overrides?: CallOverrides
    ): Promise<
      [UnderlyingOutputStructOutput] & {
        underlying: UnderlyingOutputStructOutput;
      }
    >;
  };

  token0AndToken1ByRange(
    ranges_: RangeStruct[],
    token0_: string,
    token1_: string,
    vaultV2_: string,
    overrides?: CallOverrides
  ): Promise<
    [AmountStructOutput[], AmountStructOutput[]] & {
      amount0s: AmountStructOutput[];
      amount1s: AmountStructOutput[];
    }
  >;

  token0AndToken1PlusFeesByRange(
    ranges_: RangeStruct[],
    token0_: string,
    token1_: string,
    vaultV2_: string,
    overrides?: CallOverrides
  ): Promise<
    [
      AmountStructOutput[],
      AmountStructOutput[],
      AmountStructOutput[],
      AmountStructOutput[]
    ] & {
      amount0s: AmountStructOutput[];
      amount1s: AmountStructOutput[];
      fee0s: AmountStructOutput[];
      fee1s: AmountStructOutput[];
    }
  >;

  totalLiquidity(
    vault_: string,
    overrides?: CallOverrides
  ): Promise<PositionLiquidityStructOutput[]>;

  totalUnderlying(
    vault_: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
  >;

  totalUnderlyingAtPrice(
    vault_: string,
    sqrtPriceX96_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
  >;

  totalUnderlyingWithFees(
    vault_: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount0: BigNumber;
      amount1: BigNumber;
      fee0: BigNumber;
      fee1: BigNumber;
    }
  >;

  totalUnderlyingWithFeesAndLeftOver(
    vault_: string,
    overrides?: CallOverrides
  ): Promise<UnderlyingOutputStructOutput>;

  callStatic: {
    token0AndToken1ByRange(
      ranges_: RangeStruct[],
      token0_: string,
      token1_: string,
      vaultV2_: string,
      overrides?: CallOverrides
    ): Promise<
      [AmountStructOutput[], AmountStructOutput[]] & {
        amount0s: AmountStructOutput[];
        amount1s: AmountStructOutput[];
      }
    >;

    token0AndToken1PlusFeesByRange(
      ranges_: RangeStruct[],
      token0_: string,
      token1_: string,
      vaultV2_: string,
      overrides?: CallOverrides
    ): Promise<
      [
        AmountStructOutput[],
        AmountStructOutput[],
        AmountStructOutput[],
        AmountStructOutput[]
      ] & {
        amount0s: AmountStructOutput[];
        amount1s: AmountStructOutput[];
        fee0s: AmountStructOutput[];
        fee1s: AmountStructOutput[];
      }
    >;

    totalLiquidity(
      vault_: string,
      overrides?: CallOverrides
    ): Promise<PositionLiquidityStructOutput[]>;

    totalUnderlying(
      vault_: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    totalUnderlyingAtPrice(
      vault_: string,
      sqrtPriceX96_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    totalUnderlyingWithFees(
      vault_: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount0: BigNumber;
        amount1: BigNumber;
        fee0: BigNumber;
        fee1: BigNumber;
      }
    >;

    totalUnderlyingWithFeesAndLeftOver(
      vault_: string,
      overrides?: CallOverrides
    ): Promise<UnderlyingOutputStructOutput>;
  };

  filters: {};

  estimateGas: {
    token0AndToken1ByRange(
      ranges_: RangeStruct[],
      token0_: string,
      token1_: string,
      vaultV2_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token0AndToken1PlusFeesByRange(
      ranges_: RangeStruct[],
      token0_: string,
      token1_: string,
      vaultV2_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLiquidity(
      vault_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalUnderlying(
      vault_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalUnderlyingAtPrice(
      vault_: string,
      sqrtPriceX96_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalUnderlyingWithFees(
      vault_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalUnderlyingWithFeesAndLeftOver(
      vault_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    token0AndToken1ByRange(
      ranges_: RangeStruct[],
      token0_: string,
      token1_: string,
      vaultV2_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token0AndToken1PlusFeesByRange(
      ranges_: RangeStruct[],
      token0_: string,
      token1_: string,
      vaultV2_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLiquidity(
      vault_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalUnderlying(
      vault_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalUnderlyingAtPrice(
      vault_: string,
      sqrtPriceX96_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalUnderlyingWithFees(
      vault_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalUnderlyingWithFeesAndLeftOver(
      vault_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
