/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace ICommonNonfungiblePositionManager {
  export type DecreaseLiquidityParamsStruct = {
    tokenId: BigNumberish;
    liquidity: BigNumberish;
    amount0Min: BigNumberish;
    amount1Min: BigNumberish;
    deadline: BigNumberish;
  };

  export type DecreaseLiquidityParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokenId: BigNumber;
    liquidity: BigNumber;
    amount0Min: BigNumber;
    amount1Min: BigNumber;
    deadline: BigNumber;
  };

  export type IncreaseLiquidityParamsStruct = {
    tokenId: BigNumberish;
    amount0Desired: BigNumberish;
    amount1Desired: BigNumberish;
    amount0Min: BigNumberish;
    amount1Min: BigNumberish;
    deadline: BigNumberish;
  };

  export type IncreaseLiquidityParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokenId: BigNumber;
    amount0Desired: BigNumber;
    amount1Desired: BigNumber;
    amount0Min: BigNumber;
    amount1Min: BigNumber;
    deadline: BigNumber;
  };
}

export declare namespace ISlipStreamNonfungiblePositionManager {
  export type MintParamsStruct = {
    token0: string;
    token1: string;
    tickSpacing: BigNumberish;
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    amount0Desired: BigNumberish;
    amount1Desired: BigNumberish;
    amount0Min: BigNumberish;
    amount1Min: BigNumberish;
    recipient: string;
    deadline: BigNumberish;
    sqrtPriceX96: BigNumberish;
  };

  export type MintParamsStructOutput = [
    string,
    string,
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    token0: string;
    token1: string;
    tickSpacing: number;
    tickLower: number;
    tickUpper: number;
    amount0Desired: BigNumber;
    amount1Desired: BigNumber;
    amount0Min: BigNumber;
    amount1Min: BigNumber;
    recipient: string;
    deadline: BigNumber;
    sqrtPriceX96: BigNumber;
  };
}

export declare namespace IAutomanCommon {
  export type FeeConfigStruct = {
    feeCollector: string;
    feeLimitPips: BigNumberish;
  };

  export type FeeConfigStructOutput = [string, BigNumber] & {
    feeCollector: string;
    feeLimitPips: BigNumber;
  };
}

export interface ISlipStreamAutomanInterface extends utils.Interface {
  functions: {
    "WETH9()": FunctionFragment;
    "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256),uint256,uint256,bool)": FunctionFragment;
    "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256),uint256,uint256,bool,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "decreaseLiquidityToTokenOut((uint256,uint128,uint256,uint256,uint256),address,uint256,bytes,bytes,bool)": FunctionFragment;
    "decreaseLiquidityToTokenOut((uint256,uint128,uint256,uint256,uint256),address,uint256,bytes,bytes,bool,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "factory()": FunctionFragment;
    "getOptimalSwap(address,int24,int24,uint256,uint256)": FunctionFragment;
    "increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "increaseLiquidityOptimal((uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256)": FunctionFragment;
    "increaseLiquidityWithTokenIn((uint256,uint256,uint256,uint256,uint256,uint256),address,uint256,bytes,bytes)": FunctionFragment;
    "isController(address)": FunctionFragment;
    "mint((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160))": FunctionFragment;
    "mintOptimal((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),bytes,uint256,uint256)": FunctionFragment;
    "mintWithTokenIn((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),address,uint256,bytes,bytes)": FunctionFragment;
    "npm()": FunctionFragment;
    "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes)": FunctionFragment;
    "reinvest((uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bytes)": FunctionFragment;
    "reinvest((uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "setAllowlistedRouters(address[],bool[])": FunctionFragment;
    "setControllers(address[],bool[])": FunctionFragment;
    "setFeeConfig((address,uint96))": FunctionFragment;
    "uniswapV3SwapCallback(int256,int256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "WETH9"
      | "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256),uint256,uint256,bool)"
      | "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256),uint256,uint256,bool,uint256,uint8,bytes32,bytes32)"
      | "decreaseLiquidityToTokenOut((uint256,uint128,uint256,uint256,uint256),address,uint256,bytes,bytes,bool)"
      | "decreaseLiquidityToTokenOut((uint256,uint128,uint256,uint256,uint256),address,uint256,bytes,bytes,bool,uint256,uint8,bytes32,bytes32)"
      | "factory"
      | "getOptimalSwap"
      | "increaseLiquidity"
      | "increaseLiquidityOptimal"
      | "increaseLiquidityWithTokenIn"
      | "isController"
      | "mint"
      | "mintOptimal"
      | "mintWithTokenIn"
      | "npm"
      | "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)"
      | "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes)"
      | "reinvest((uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bytes)"
      | "reinvest((uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)"
      | "setAllowlistedRouters"
      | "setControllers"
      | "setFeeConfig"
      | "uniswapV3SwapCallback"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256),uint256,uint256,bool)",
    values: [
      ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256),uint256,uint256,bool,uint256,uint8,bytes32,bytes32)",
    values: [
      ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidityToTokenOut((uint256,uint128,uint256,uint256,uint256),address,uint256,bytes,bytes,bool)",
    values: [
      ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
      string,
      BigNumberish,
      BytesLike,
      BytesLike,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseLiquidityToTokenOut((uint256,uint128,uint256,uint256,uint256),address,uint256,bytes,bytes,bool,uint256,uint8,bytes32,bytes32)",
    values: [
      ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
      string,
      BigNumberish,
      BytesLike,
      BytesLike,
      boolean,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getOptimalSwap",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidity",
    values: [ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidityOptimal",
    values: [
      ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseLiquidityWithTokenIn",
    values: [
      ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [ISlipStreamNonfungiblePositionManager.MintParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mintOptimal",
    values: [
      ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithTokenIn",
    values: [
      ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "npm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)",
    values: [
      ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes)",
    values: [
      ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reinvest((uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bytes)",
    values: [
      ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reinvest((uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)",
    values: [
      ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowlistedRouters",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setControllers",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeConfig",
    values: [IAutomanCommon.FeeConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapCallback",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256),uint256,uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256),uint256,uint256,bool,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidityToTokenOut((uint256,uint128,uint256,uint256,uint256),address,uint256,bytes,bytes,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseLiquidityToTokenOut((uint256,uint128,uint256,uint256,uint256),address,uint256,bytes,bytes,bool,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOptimalSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidityOptimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseLiquidityWithTokenIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintOptimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithTokenIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "npm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reinvest((uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reinvest((uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowlistedRouters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapCallback",
    data: BytesLike
  ): Result;

  events: {
    "ControllersSet(address[],bool[])": EventFragment;
    "DecreaseLiquidity(uint256)": EventFragment;
    "FeeConfigSet(address,uint96)": EventFragment;
    "IncreaseLiquidity(uint256)": EventFragment;
    "Mint(uint256)": EventFragment;
    "Rebalance(uint256)": EventFragment;
    "Reinvest(uint256)": EventFragment;
    "RemoveLiquidity(uint256)": EventFragment;
    "SetAllowlistedRouters(address[],bool[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ControllersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecreaseLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeConfigSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rebalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reinvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAllowlistedRouters"): EventFragment;
}

export interface ControllersSetEventObject {
  controllers: string[];
  statuses: boolean[];
}
export type ControllersSetEvent = TypedEvent<
  [string[], boolean[]],
  ControllersSetEventObject
>;

export type ControllersSetEventFilter = TypedEventFilter<ControllersSetEvent>;

export interface DecreaseLiquidityEventObject {
  tokenId: BigNumber;
}
export type DecreaseLiquidityEvent = TypedEvent<
  [BigNumber],
  DecreaseLiquidityEventObject
>;

export type DecreaseLiquidityEventFilter =
  TypedEventFilter<DecreaseLiquidityEvent>;

export interface FeeConfigSetEventObject {
  feeCollector: string;
  feeLimitPips: BigNumber;
}
export type FeeConfigSetEvent = TypedEvent<
  [string, BigNumber],
  FeeConfigSetEventObject
>;

export type FeeConfigSetEventFilter = TypedEventFilter<FeeConfigSetEvent>;

export interface IncreaseLiquidityEventObject {
  tokenId: BigNumber;
}
export type IncreaseLiquidityEvent = TypedEvent<
  [BigNumber],
  IncreaseLiquidityEventObject
>;

export type IncreaseLiquidityEventFilter =
  TypedEventFilter<IncreaseLiquidityEvent>;

export interface MintEventObject {
  tokenId: BigNumber;
}
export type MintEvent = TypedEvent<[BigNumber], MintEventObject>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface RebalanceEventObject {
  tokenId: BigNumber;
}
export type RebalanceEvent = TypedEvent<[BigNumber], RebalanceEventObject>;

export type RebalanceEventFilter = TypedEventFilter<RebalanceEvent>;

export interface ReinvestEventObject {
  tokenId: BigNumber;
}
export type ReinvestEvent = TypedEvent<[BigNumber], ReinvestEventObject>;

export type ReinvestEventFilter = TypedEventFilter<ReinvestEvent>;

export interface RemoveLiquidityEventObject {
  tokenId: BigNumber;
}
export type RemoveLiquidityEvent = TypedEvent<
  [BigNumber],
  RemoveLiquidityEventObject
>;

export type RemoveLiquidityEventFilter = TypedEventFilter<RemoveLiquidityEvent>;

export interface SetAllowlistedRoutersEventObject {
  routers: string[];
  statuses: boolean[];
}
export type SetAllowlistedRoutersEvent = TypedEvent<
  [string[], boolean[]],
  SetAllowlistedRoutersEventObject
>;

export type SetAllowlistedRoutersEventFilter =
  TypedEventFilter<SetAllowlistedRoutersEvent>;

export interface ISlipStreamAutoman extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISlipStreamAutomanInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WETH9(overrides?: CallOverrides): Promise<[string]>;

    "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256),uint256,uint256,bool)"(
      params: ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      isUnwrapNative: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256),uint256,uint256,bool,uint256,uint8,bytes32,bytes32)"(
      params: ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      isUnwrapNative: boolean,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "decreaseLiquidityToTokenOut((uint256,uint128,uint256,uint256,uint256),address,uint256,bytes,bytes,bool)"(
      params: ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
      tokenOut: string,
      tokenOutMin: BigNumberish,
      swapData0: BytesLike,
      swapData1: BytesLike,
      isUnwrapNative: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "decreaseLiquidityToTokenOut((uint256,uint128,uint256,uint256,uint256),address,uint256,bytes,bytes,bool,uint256,uint8,bytes32,bytes32)"(
      params: ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
      tokenOut: string,
      tokenOutMin: BigNumberish,
      swapData0: BytesLike,
      swapData1: BytesLike,
      isUnwrapNative: boolean,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getOptimalSwap(
      pool: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, BigNumber] & {
        amountIn: BigNumber;
        amountOut: BigNumber;
        zeroForOne: boolean;
        sqrtPriceX96: BigNumber;
      }
    >;

    increaseLiquidity(
      params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    increaseLiquidityOptimal(
      params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      swapData: BytesLike,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    increaseLiquidityWithTokenIn(
      params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      tokenIn: string,
      tokenInFeeAmount: BigNumberish,
      swapData0: BytesLike,
      swapData1: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    isController(
      addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintOptimal(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      swapData: BytesLike,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintWithTokenIn(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenIn: string,
      tokenInFeeAmount: BigNumberish,
      swapData0: BytesLike,
      swapData1: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    npm(overrides?: CallOverrides): Promise<[string]>;

    "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)"(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenId: BigNumberish,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes)"(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenId: BigNumberish,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "reinvest((uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bytes)"(
      params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "reinvest((uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)"(
      params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAllowlistedRouters(
      routers: string[],
      statuses: boolean[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    setControllers(
      controllers: string[],
      statuses: boolean[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeeConfig(
      _feeConfig: IAutomanCommon.FeeConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  WETH9(overrides?: CallOverrides): Promise<string>;

  "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256),uint256,uint256,bool)"(
    params: ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
    token0FeeAmount: BigNumberish,
    token1FeeAmount: BigNumberish,
    isUnwrapNative: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256),uint256,uint256,bool,uint256,uint8,bytes32,bytes32)"(
    params: ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
    token0FeeAmount: BigNumberish,
    token1FeeAmount: BigNumberish,
    isUnwrapNative: boolean,
    permitDeadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "decreaseLiquidityToTokenOut((uint256,uint128,uint256,uint256,uint256),address,uint256,bytes,bytes,bool)"(
    params: ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
    tokenOut: string,
    tokenOutMin: BigNumberish,
    swapData0: BytesLike,
    swapData1: BytesLike,
    isUnwrapNative: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "decreaseLiquidityToTokenOut((uint256,uint128,uint256,uint256,uint256),address,uint256,bytes,bytes,bool,uint256,uint8,bytes32,bytes32)"(
    params: ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
    tokenOut: string,
    tokenOutMin: BigNumberish,
    swapData0: BytesLike,
    swapData1: BytesLike,
    isUnwrapNative: boolean,
    permitDeadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getOptimalSwap(
    pool: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    amount0Desired: BigNumberish,
    amount1Desired: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean, BigNumber] & {
      amountIn: BigNumber;
      amountOut: BigNumber;
      zeroForOne: boolean;
      sqrtPriceX96: BigNumber;
    }
  >;

  increaseLiquidity(
    params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  increaseLiquidityOptimal(
    params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
    swapData: BytesLike,
    token0FeeAmount: BigNumberish,
    token1FeeAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  increaseLiquidityWithTokenIn(
    params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
    tokenIn: string,
    tokenInFeeAmount: BigNumberish,
    swapData0: BytesLike,
    swapData1: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  isController(
    addressToCheck: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintOptimal(
    params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
    swapData: BytesLike,
    token0FeeAmount: BigNumberish,
    token1FeeAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintWithTokenIn(
    params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
    tokenIn: string,
    tokenInFeeAmount: BigNumberish,
    swapData0: BytesLike,
    swapData1: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  npm(overrides?: CallOverrides): Promise<string>;

  "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)"(
    params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
    tokenId: BigNumberish,
    token0FeeAmount: BigNumberish,
    token1FeeAmount: BigNumberish,
    swapData: BytesLike,
    permitDeadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes)"(
    params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
    tokenId: BigNumberish,
    token0FeeAmount: BigNumberish,
    token1FeeAmount: BigNumberish,
    swapData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "reinvest((uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bytes)"(
    params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
    token0FeeAmount: BigNumberish,
    token1FeeAmount: BigNumberish,
    swapData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "reinvest((uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)"(
    params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
    token0FeeAmount: BigNumberish,
    token1FeeAmount: BigNumberish,
    swapData: BytesLike,
    permitDeadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAllowlistedRouters(
    routers: string[],
    statuses: boolean[],
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  setControllers(
    controllers: string[],
    statuses: boolean[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeeConfig(
    _feeConfig: IAutomanCommon.FeeConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  uniswapV3SwapCallback(
    amount0Delta: BigNumberish,
    amount1Delta: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH9(overrides?: CallOverrides): Promise<string>;

    "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256),uint256,uint256,bool)"(
      params: ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      isUnwrapNative: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256),uint256,uint256,bool,uint256,uint8,bytes32,bytes32)"(
      params: ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      isUnwrapNative: boolean,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    "decreaseLiquidityToTokenOut((uint256,uint128,uint256,uint256,uint256),address,uint256,bytes,bytes,bool)"(
      params: ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
      tokenOut: string,
      tokenOutMin: BigNumberish,
      swapData0: BytesLike,
      swapData1: BytesLike,
      isUnwrapNative: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decreaseLiquidityToTokenOut((uint256,uint128,uint256,uint256,uint256),address,uint256,bytes,bytes,bool,uint256,uint8,bytes32,bytes32)"(
      params: ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
      tokenOut: string,
      tokenOutMin: BigNumberish,
      swapData0: BytesLike,
      swapData1: BytesLike,
      isUnwrapNative: boolean,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    getOptimalSwap(
      pool: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, BigNumber] & {
        amountIn: BigNumber;
        amountOut: BigNumber;
        zeroForOne: boolean;
        sqrtPriceX96: BigNumber;
      }
    >;

    increaseLiquidity(
      params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    increaseLiquidityOptimal(
      params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      swapData: BytesLike,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    increaseLiquidityWithTokenIn(
      params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      tokenIn: string,
      tokenInFeeAmount: BigNumberish,
      swapData0: BytesLike,
      swapData1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    isController(
      addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenId: BigNumber;
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    mintOptimal(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      swapData: BytesLike,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenId: BigNumber;
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    mintWithTokenIn(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenIn: string,
      tokenInFeeAmount: BigNumberish,
      swapData0: BytesLike,
      swapData1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenId: BigNumber;
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    npm(overrides?: CallOverrides): Promise<string>;

    "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)"(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenId: BigNumberish,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        newTokenId: BigNumber;
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes)"(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenId: BigNumberish,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        newTokenId: BigNumber;
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    "reinvest((uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bytes)"(
      params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    "reinvest((uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)"(
      params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    setAllowlistedRouters(
      routers: string[],
      statuses: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    setControllers(
      controllers: string[],
      statuses: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeConfig(
      _feeConfig: IAutomanCommon.FeeConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ControllersSet(address[],bool[])"(
      controllers?: null,
      statuses?: null
    ): ControllersSetEventFilter;
    ControllersSet(
      controllers?: null,
      statuses?: null
    ): ControllersSetEventFilter;

    "DecreaseLiquidity(uint256)"(
      tokenId?: BigNumberish | null
    ): DecreaseLiquidityEventFilter;
    DecreaseLiquidity(
      tokenId?: BigNumberish | null
    ): DecreaseLiquidityEventFilter;

    "FeeConfigSet(address,uint96)"(
      feeCollector?: null,
      feeLimitPips?: null
    ): FeeConfigSetEventFilter;
    FeeConfigSet(
      feeCollector?: null,
      feeLimitPips?: null
    ): FeeConfigSetEventFilter;

    "IncreaseLiquidity(uint256)"(
      tokenId?: BigNumberish | null
    ): IncreaseLiquidityEventFilter;
    IncreaseLiquidity(
      tokenId?: BigNumberish | null
    ): IncreaseLiquidityEventFilter;

    "Mint(uint256)"(tokenId?: BigNumberish | null): MintEventFilter;
    Mint(tokenId?: BigNumberish | null): MintEventFilter;

    "Rebalance(uint256)"(tokenId?: BigNumberish | null): RebalanceEventFilter;
    Rebalance(tokenId?: BigNumberish | null): RebalanceEventFilter;

    "Reinvest(uint256)"(tokenId?: BigNumberish | null): ReinvestEventFilter;
    Reinvest(tokenId?: BigNumberish | null): ReinvestEventFilter;

    "RemoveLiquidity(uint256)"(
      tokenId?: BigNumberish | null
    ): RemoveLiquidityEventFilter;
    RemoveLiquidity(tokenId?: BigNumberish | null): RemoveLiquidityEventFilter;

    "SetAllowlistedRouters(address[],bool[])"(
      routers?: null,
      statuses?: null
    ): SetAllowlistedRoutersEventFilter;
    SetAllowlistedRouters(
      routers?: null,
      statuses?: null
    ): SetAllowlistedRoutersEventFilter;
  };

  estimateGas: {
    WETH9(overrides?: CallOverrides): Promise<BigNumber>;

    "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256),uint256,uint256,bool)"(
      params: ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      isUnwrapNative: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256),uint256,uint256,bool,uint256,uint8,bytes32,bytes32)"(
      params: ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      isUnwrapNative: boolean,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "decreaseLiquidityToTokenOut((uint256,uint128,uint256,uint256,uint256),address,uint256,bytes,bytes,bool)"(
      params: ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
      tokenOut: string,
      tokenOutMin: BigNumberish,
      swapData0: BytesLike,
      swapData1: BytesLike,
      isUnwrapNative: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "decreaseLiquidityToTokenOut((uint256,uint128,uint256,uint256,uint256),address,uint256,bytes,bytes,bool,uint256,uint8,bytes32,bytes32)"(
      params: ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
      tokenOut: string,
      tokenOutMin: BigNumberish,
      swapData0: BytesLike,
      swapData1: BytesLike,
      isUnwrapNative: boolean,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getOptimalSwap(
      pool: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseLiquidity(
      params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    increaseLiquidityOptimal(
      params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      swapData: BytesLike,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    increaseLiquidityWithTokenIn(
      params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      tokenIn: string,
      tokenInFeeAmount: BigNumberish,
      swapData0: BytesLike,
      swapData1: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    isController(
      addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    mintOptimal(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      swapData: BytesLike,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    mintWithTokenIn(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenIn: string,
      tokenInFeeAmount: BigNumberish,
      swapData0: BytesLike,
      swapData1: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    npm(overrides?: CallOverrides): Promise<BigNumber>;

    "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)"(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenId: BigNumberish,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes)"(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenId: BigNumberish,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "reinvest((uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bytes)"(
      params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "reinvest((uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)"(
      params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAllowlistedRouters(
      routers: string[],
      statuses: boolean[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    setControllers(
      controllers: string[],
      statuses: boolean[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeeConfig(
      _feeConfig: IAutomanCommon.FeeConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256),uint256,uint256,bool)"(
      params: ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      isUnwrapNative: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256),uint256,uint256,bool,uint256,uint8,bytes32,bytes32)"(
      params: ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      isUnwrapNative: boolean,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "decreaseLiquidityToTokenOut((uint256,uint128,uint256,uint256,uint256),address,uint256,bytes,bytes,bool)"(
      params: ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
      tokenOut: string,
      tokenOutMin: BigNumberish,
      swapData0: BytesLike,
      swapData1: BytesLike,
      isUnwrapNative: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "decreaseLiquidityToTokenOut((uint256,uint128,uint256,uint256,uint256),address,uint256,bytes,bytes,bool,uint256,uint8,bytes32,bytes32)"(
      params: ICommonNonfungiblePositionManager.DecreaseLiquidityParamsStruct,
      tokenOut: string,
      tokenOutMin: BigNumberish,
      swapData0: BytesLike,
      swapData1: BytesLike,
      isUnwrapNative: boolean,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOptimalSwap(
      pool: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount0Desired: BigNumberish,
      amount1Desired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseLiquidity(
      params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    increaseLiquidityOptimal(
      params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      swapData: BytesLike,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    increaseLiquidityWithTokenIn(
      params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      tokenIn: string,
      tokenInFeeAmount: BigNumberish,
      swapData0: BytesLike,
      swapData1: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isController(
      addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintOptimal(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      swapData: BytesLike,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintWithTokenIn(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenIn: string,
      tokenInFeeAmount: BigNumberish,
      swapData0: BytesLike,
      swapData1: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    npm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)"(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenId: BigNumberish,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes)"(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenId: BigNumberish,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "reinvest((uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bytes)"(
      params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "reinvest((uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)"(
      params: ICommonNonfungiblePositionManager.IncreaseLiquidityParamsStruct,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAllowlistedRouters(
      routers: string[],
      statuses: boolean[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setControllers(
      controllers: string[],
      statuses: boolean[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeeConfig(
      _feeConfig: IAutomanCommon.FeeConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
