/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace ISlipStreamNonfungiblePositionManager {
  export type MintParamsStruct = {
    token0: string;
    token1: string;
    tickSpacing: BigNumberish;
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    amount0Desired: BigNumberish;
    amount1Desired: BigNumberish;
    amount0Min: BigNumberish;
    amount1Min: BigNumberish;
    recipient: string;
    deadline: BigNumberish;
    sqrtPriceX96: BigNumberish;
  };

  export type MintParamsStructOutput = [
    string,
    string,
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    token0: string;
    token1: string;
    tickSpacing: number;
    tickLower: number;
    tickUpper: number;
    amount0Desired: BigNumber;
    amount1Desired: BigNumber;
    amount0Min: BigNumber;
    amount1Min: BigNumber;
    recipient: string;
    deadline: BigNumber;
    sqrtPriceX96: BigNumber;
  };
}

export interface IAutomanSlipStreamMintRebalanceInterface
  extends utils.Interface {
  functions: {
    "mint((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160))": FunctionFragment;
    "mintFromTokenIn((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),address,uint256,bytes,bytes)": FunctionFragment;
    "mintOptimal((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),bytes,uint256,uint256)": FunctionFragment;
    "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "mint"
      | "mintFromTokenIn"
      | "mintOptimal"
      | "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)"
      | "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "mint",
    values: [ISlipStreamNonfungiblePositionManager.MintParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFromTokenIn",
    values: [
      ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintOptimal",
    values: [
      ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)",
    values: [
      ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes)",
    values: [
      ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintFromTokenIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintOptimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IAutomanSlipStreamMintRebalance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAutomanSlipStreamMintRebalanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    mint(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintFromTokenIn(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenIn: string,
      tokenInFeeAmount: BigNumberish,
      swapData0: BytesLike,
      swapData1: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    mintOptimal(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      swapData: BytesLike,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)"(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenId: BigNumberish,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes)"(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenId: BigNumberish,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  mint(
    params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintFromTokenIn(
    params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
    tokenIn: string,
    tokenInFeeAmount: BigNumberish,
    swapData0: BytesLike,
    swapData1: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  mintOptimal(
    params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
    swapData: BytesLike,
    token0FeeAmount: BigNumberish,
    token1FeeAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)"(
    params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
    tokenId: BigNumberish,
    token0FeeAmount: BigNumberish,
    token1FeeAmount: BigNumberish,
    swapData: BytesLike,
    permitDeadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes)"(
    params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
    tokenId: BigNumberish,
    token0FeeAmount: BigNumberish,
    token1FeeAmount: BigNumberish,
    swapData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    mint(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenId: BigNumber;
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    mintFromTokenIn(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenIn: string,
      tokenInFeeAmount: BigNumberish,
      swapData0: BytesLike,
      swapData1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenId: BigNumber;
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    mintOptimal(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      swapData: BytesLike,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tokenId: BigNumber;
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)"(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenId: BigNumberish,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        newTokenId: BigNumber;
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes)"(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenId: BigNumberish,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        newTokenId: BigNumber;
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    mint(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    mintFromTokenIn(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenIn: string,
      tokenInFeeAmount: BigNumberish,
      swapData0: BytesLike,
      swapData1: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    mintOptimal(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      swapData: BytesLike,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)"(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenId: BigNumberish,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes)"(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenId: BigNumberish,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    mint(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintFromTokenIn(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenIn: string,
      tokenInFeeAmount: BigNumberish,
      swapData0: BytesLike,
      swapData1: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mintOptimal(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      swapData: BytesLike,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes,uint256,uint8,bytes32,bytes32)"(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenId: BigNumberish,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      permitDeadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "rebalance((address,address,int24,int24,int24,uint256,uint256,uint256,uint256,address,uint256,uint160),uint256,uint256,uint256,bytes)"(
      params: ISlipStreamNonfungiblePositionManager.MintParamsStruct,
      tokenId: BigNumberish,
      token0FeeAmount: BigNumberish,
      token1FeeAmount: BigNumberish,
      swapData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
